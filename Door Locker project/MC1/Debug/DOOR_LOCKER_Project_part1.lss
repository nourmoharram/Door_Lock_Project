
DOOR_LOCKER_Project_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002682  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  00002682  00002716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000fc  008000fc  000027b2  2**0
                  ALLOC
  3 .stab         00002754  00000000  00000000  000027b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001285  00000000  00000000  00004f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000618d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000062cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000643d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008086  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008f71  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a10d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a8db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 30       	cpi	r26, 0x04	; 4
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 87 12 	call	0x250e	; 0x250e <main>
      8a:	0c 94 3f 13 	jmp	0x267e	; 0x267e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ed       	ldi	r26, 0xDC	; 220
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 30 13 	jmp	0x2660	; 0x2660 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 30 13 	jmp	0x2660	; 0x2660 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 08 13 	jmp	0x2610	; 0x2610 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ed       	ldi	r24, 0xDC	; 220
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 24 13 	jmp	0x2648	; 0x2648 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 30 13 	jmp	0x2660	; 0x2660 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 30 13 	jmp	0x2660	; 0x2660 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 14 13 	jmp	0x2628	; 0x2628 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 30 13 	jmp	0x2660	; 0x2660 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 18 13 	jmp	0x2630	; 0x2630 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <USART_voidPinInit>:
#include"../UART_Header/UART_Private.h"
#include"../UART_Header/UART_Register.h"
#include"../../DIO/DIO_Header/DIO_Interface.h"

void USART_voidPinInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Initialize USART PINS*/
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN0,DIO_u8PIN_INPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTD,DIO_u8PIN1,DIO_u8PIN_OUTPUT);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <USART_voidInit>:


void USART_voidInit(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	0f 92       	push	r0
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
	u8 Local_UCSRC=0;
     b72:	19 82       	std	Y+1, r1	; 0x01
	/*SET BIT 7 TO SELECT UCSRC REGISTER*/
	SET_BIT(Local_UCSRC,UCSRC_URSEL);
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	80 68       	ori	r24, 0x80	; 128
     b78:	89 83       	std	Y+1, r24	; 0x01
	/*Mode initially is Asynchronous*/
	CLR_BIT(Local_UCSRC,UCSRC_UMSEL);
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	8f 7b       	andi	r24, 0xBF	; 191
     b7e:	89 83       	std	Y+1, r24	; 0x01
	/*Parity mode disabled initially*/
	CLR_BIT(Local_UCSRC,UCSRC_UPM0);
     b80:	89 81       	ldd	r24, Y+1	; 0x01
     b82:	8f 7e       	andi	r24, 0xEF	; 239
     b84:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_UCSRC,UCSRC_UPM1);
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	8f 7d       	andi	r24, 0xDF	; 223
     b8a:	89 83       	std	Y+1, r24	; 0x01

	/*Stop bit is 1 initially*/
	CLR_BIT(Local_UCSRC,UCSRC_USBS);
     b8c:	89 81       	ldd	r24, Y+1	; 0x01
     b8e:	87 7f       	andi	r24, 0xF7	; 247
     b90:	89 83       	std	Y+1, r24	; 0x01

	/*select 8 bit word size*/
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
     b92:	aa e2       	ldi	r26, 0x2A	; 42
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	ea e2       	ldi	r30, 0x2A	; 42
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	8b 7f       	andi	r24, 0xFB	; 251
     b9e:	8c 93       	st	X, r24
	SET_BIT(Local_UCSRC,UCSRC_UCSZ0);
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	82 60       	ori	r24, 0x02	; 2
     ba4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_UCSRC,UCSRC_UCSZ1);
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	84 60       	ori	r24, 0x04	; 4
     baa:	89 83       	std	Y+1, r24	; 0x01

	UCSRC = Local_UCSRC;
     bac:	e0 e4       	ldi	r30, 0x40	; 64
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	80 83       	st	Z, r24
	/*SET BAUD RATE TO 9600 bit/second*/
	UBBRL = 51;
     bb4:	e9 e2       	ldi	r30, 0x29	; 41
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	83 e3       	ldi	r24, 0x33	; 51
     bba:	80 83       	st	Z, r24

	SET_BIT(UCSRB,UCSRB_RXEN); //ENABLE receive bit
     bbc:	aa e2       	ldi	r26, 0x2A	; 42
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	ea e2       	ldi	r30, 0x2A	; 42
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	80 61       	ori	r24, 0x10	; 16
     bc8:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_TXEN); //ENABLE transmit bit
     bca:	aa e2       	ldi	r26, 0x2A	; 42
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	ea e2       	ldi	r30, 0x2A	; 42
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	88 60       	ori	r24, 0x08	; 8
     bd6:	8c 93       	st	X, r24
}
     bd8:	0f 90       	pop	r0
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <USART_voidSend>:

void USART_voidSend(u8 Copy_u8data)
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	0f 92       	push	r0
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	89 83       	std	Y+1, r24	; 0x01
	/*WAIT until transmit buffer is empty*/
	while(GET_BIT(UCSRA,UCSRA_UDRE)==0);
     bec:	eb e2       	ldi	r30, 0x2B	; 43
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	82 95       	swap	r24
     bf4:	86 95       	lsr	r24
     bf6:	87 70       	andi	r24, 0x07	; 7
     bf8:	88 2f       	mov	r24, r24
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	81 70       	andi	r24, 0x01	; 1
     bfe:	90 70       	andi	r25, 0x00	; 0
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	a1 f3       	breq	.-24     	; 0xbec <USART_voidSend+0xc>
	UDR= Copy_u8data;
     c04:	ec e2       	ldi	r30, 0x2C	; 44
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	80 83       	st	Z, r24
}
     c0c:	0f 90       	pop	r0
     c0e:	cf 91       	pop	r28
     c10:	df 91       	pop	r29
     c12:	08 95       	ret

00000c14 <USART_u8Receive>:

u8 USART_u8Receive(void)
{
     c14:	df 93       	push	r29
     c16:	cf 93       	push	r28
     c18:	cd b7       	in	r28, 0x3d	; 61
     c1a:	de b7       	in	r29, 0x3e	; 62
	/*wait until receive is complete*/
	while(GET_BIT(UCSRA,UCSRA_RXC)==0);
     c1c:	eb e2       	ldi	r30, 0x2B	; 43
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	88 23       	and	r24, r24
     c24:	dc f7       	brge	.-10     	; 0xc1c <USART_u8Receive+0x8>
	return UDR;
     c26:	ec e2       	ldi	r30, 0x2C	; 44
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z

}
     c2c:	cf 91       	pop	r28
     c2e:	df 91       	pop	r29
     c30:	08 95       	ret

00000c32 <TIMER1_voidInit>:
#include"../../DIO/DIO_Header/DIO_Interface.h"
#include"../TIMER1_Header/TIMER1_Interface.h"
#include"../TIMER1_Header/TIMER1_Register.h"

void TIMER1_voidInit(void)
{
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
	/*Select Fast-PWM Non-inverting mode*/
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
     c3a:	af e4       	ldi	r26, 0x4F	; 79
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	ef e4       	ldi	r30, 0x4F	; 79
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	80 68       	ori	r24, 0x80	; 128
     c46:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
     c48:	af e4       	ldi	r26, 0x4F	; 79
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	ef e4       	ldi	r30, 0x4F	; 79
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	8f 7b       	andi	r24, 0xBF	; 191
     c54:	8c 93       	st	X, r24
	/*Setting waveform for fast PWM*/
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
     c56:	af e4       	ldi	r26, 0x4F	; 79
     c58:	b0 e0       	ldi	r27, 0x00	; 0
     c5a:	ef e4       	ldi	r30, 0x4F	; 79
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	8e 7f       	andi	r24, 0xFE	; 254
     c62:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
     c64:	af e4       	ldi	r26, 0x4F	; 79
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	ef e4       	ldi	r30, 0x4F	; 79
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	82 60       	ori	r24, 0x02	; 2
     c70:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
     c72:	ae e4       	ldi	r26, 0x4E	; 78
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	ee e4       	ldi	r30, 0x4E	; 78
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	88 60       	ori	r24, 0x08	; 8
     c7e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
     c80:	ae e4       	ldi	r26, 0x4E	; 78
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	ee e4       	ldi	r30, 0x4E	; 78
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	80 61       	ori	r24, 0x10	; 16
     c8c:	8c 93       	st	X, r24
	/*Setting PRE-SCALLER TO 8 DIVISION*/
	CLR_BIT(TCCR1B,TCCR1B_CS10);
     c8e:	ae e4       	ldi	r26, 0x4E	; 78
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ee e4       	ldi	r30, 0x4E	; 78
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
     c9c:	ae e4       	ldi	r26, 0x4E	; 78
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	ee e4       	ldi	r30, 0x4E	; 78
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	82 60       	ori	r24, 0x02	; 2
     ca8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
     caa:	ae e4       	ldi	r26, 0x4E	; 78
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	ee e4       	ldi	r30, 0x4E	; 78
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	8b 7f       	andi	r24, 0xFB	; 251
     cb6:	8c 93       	st	X, r24

}
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <TIMER1_voidSetICR>:

void TIMER1_voidSetICR(u16 Copy_u16TopValue)
{
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <TIMER1_voidSetICR+0x6>
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	9a 83       	std	Y+2, r25	; 0x02
     cca:	89 83       	std	Y+1, r24	; 0x01
	ICR1= Copy_u16TopValue;
     ccc:	e6 e4       	ldi	r30, 0x46	; 70
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	9a 81       	ldd	r25, Y+2	; 0x02
     cd4:	91 83       	std	Z+1, r25	; 0x01
     cd6:	80 83       	st	Z, r24

}
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <TIMER1_voidSetCompareMatch>:

void TIMER1_voidSetCompareMatch(u16 Copy_u16Comparematch)
{
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <TIMER1_voidSetCompareMatch+0x6>
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	9a 83       	std	Y+2, r25	; 0x02
     cee:	89 83       	std	Y+1, r24	; 0x01
	OCR1A= Copy_u16Comparematch;
     cf0:	ea e4       	ldi	r30, 0x4A	; 74
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	91 83       	std	Z+1, r25	; 0x01
     cfa:	80 83       	st	Z, r24
}
     cfc:	0f 90       	pop	r0
     cfe:	0f 90       	pop	r0
     d00:	cf 91       	pop	r28
     d02:	df 91       	pop	r29
     d04:	08 95       	ret

00000d06 <DIO_u8SetPinDirection>:
#include"../../../COMMON/Bit_wise.h"
#include"../../../COMMON/STD_Types.h"
#include"../DIO_Header/DIO_Interface.h"
#include"../DIO_Header/DIO_Register.h"
u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	28 97       	sbiw	r28, 0x08	; 8
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	de bf       	out	0x3e, r29	; 62
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	cd bf       	out	0x3d, r28	; 61
     d1a:	8a 83       	std	Y+2, r24	; 0x02
     d1c:	6b 83       	std	Y+3, r22	; 0x03
     d1e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     d20:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	88 30       	cpi	r24, 0x08	; 8
     d26:	08 f0       	brcs	.+2      	; 0xd2a <DIO_u8SetPinDirection+0x24>
     d28:	f3 c0       	rjmp	.+486    	; 0xf10 <DIO_u8SetPinDirection+0x20a>
	{
		if(Copy_u8Direction==DIO_u8PIN_INPUT)
     d2a:	8c 81       	ldd	r24, Y+4	; 0x04
     d2c:	88 23       	and	r24, r24
     d2e:	09 f0       	breq	.+2      	; 0xd32 <DIO_u8SetPinDirection+0x2c>
     d30:	77 c0       	rjmp	.+238    	; 0xe20 <DIO_u8SetPinDirection+0x11a>
		{
			switch(Copy_u8Port)
     d32:	8a 81       	ldd	r24, Y+2	; 0x02
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	38 87       	std	Y+8, r19	; 0x08
     d3a:	2f 83       	std	Y+7, r18	; 0x07
     d3c:	8f 81       	ldd	r24, Y+7	; 0x07
     d3e:	98 85       	ldd	r25, Y+8	; 0x08
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	91 05       	cpc	r25, r1
     d44:	59 f1       	breq	.+86     	; 0xd9c <DIO_u8SetPinDirection+0x96>
     d46:	2f 81       	ldd	r18, Y+7	; 0x07
     d48:	38 85       	ldd	r19, Y+8	; 0x08
     d4a:	22 30       	cpi	r18, 0x02	; 2
     d4c:	31 05       	cpc	r19, r1
     d4e:	2c f4       	brge	.+10     	; 0xd5a <DIO_u8SetPinDirection+0x54>
     d50:	8f 81       	ldd	r24, Y+7	; 0x07
     d52:	98 85       	ldd	r25, Y+8	; 0x08
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	69 f0       	breq	.+26     	; 0xd72 <DIO_u8SetPinDirection+0x6c>
     d58:	60 c0       	rjmp	.+192    	; 0xe1a <DIO_u8SetPinDirection+0x114>
     d5a:	2f 81       	ldd	r18, Y+7	; 0x07
     d5c:	38 85       	ldd	r19, Y+8	; 0x08
     d5e:	22 30       	cpi	r18, 0x02	; 2
     d60:	31 05       	cpc	r19, r1
     d62:	89 f1       	breq	.+98     	; 0xdc6 <DIO_u8SetPinDirection+0xc0>
     d64:	8f 81       	ldd	r24, Y+7	; 0x07
     d66:	98 85       	ldd	r25, Y+8	; 0x08
     d68:	83 30       	cpi	r24, 0x03	; 3
     d6a:	91 05       	cpc	r25, r1
     d6c:	09 f4       	brne	.+2      	; 0xd70 <DIO_u8SetPinDirection+0x6a>
     d6e:	40 c0       	rjmp	.+128    	; 0xdf0 <DIO_u8SetPinDirection+0xea>
     d70:	54 c0       	rjmp	.+168    	; 0xe1a <DIO_u8SetPinDirection+0x114>
			{
			case DIO_u8PORTA: CLR_BIT(DDRA,Copy_u8Pin); break;
     d72:	aa e3       	ldi	r26, 0x3A	; 58
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	ea e3       	ldi	r30, 0x3A	; 58
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	48 2f       	mov	r20, r24
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <DIO_u8SetPinDirection+0x8a>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <DIO_u8SetPinDirection+0x86>
     d94:	80 95       	com	r24
     d96:	84 23       	and	r24, r20
     d98:	8c 93       	st	X, r24
     d9a:	ba c0       	rjmp	.+372    	; 0xf10 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTB: CLR_BIT(DDRB,Copy_u8Pin); break;
     d9c:	a7 e3       	ldi	r26, 0x37	; 55
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e7 e3       	ldi	r30, 0x37	; 55
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	48 2f       	mov	r20, r24
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	02 2e       	mov	r0, r18
     db4:	02 c0       	rjmp	.+4      	; 0xdba <DIO_u8SetPinDirection+0xb4>
     db6:	88 0f       	add	r24, r24
     db8:	99 1f       	adc	r25, r25
     dba:	0a 94       	dec	r0
     dbc:	e2 f7       	brpl	.-8      	; 0xdb6 <DIO_u8SetPinDirection+0xb0>
     dbe:	80 95       	com	r24
     dc0:	84 23       	and	r24, r20
     dc2:	8c 93       	st	X, r24
     dc4:	a5 c0       	rjmp	.+330    	; 0xf10 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTC: CLR_BIT(DDRC,Copy_u8Pin); break;
     dc6:	a4 e3       	ldi	r26, 0x34	; 52
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e4 e3       	ldi	r30, 0x34	; 52
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	48 2f       	mov	r20, r24
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	02 2e       	mov	r0, r18
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <DIO_u8SetPinDirection+0xde>
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	0a 94       	dec	r0
     de6:	e2 f7       	brpl	.-8      	; 0xde0 <DIO_u8SetPinDirection+0xda>
     de8:	80 95       	com	r24
     dea:	84 23       	and	r24, r20
     dec:	8c 93       	st	X, r24
     dee:	90 c0       	rjmp	.+288    	; 0xf10 <DIO_u8SetPinDirection+0x20a>
			case DIO_u8PORTD: CLR_BIT(DDRD,Copy_u8Pin); break;
     df0:	a1 e3       	ldi	r26, 0x31	; 49
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e1 e3       	ldi	r30, 0x31	; 49
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <DIO_u8SetPinDirection+0x108>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <DIO_u8SetPinDirection+0x104>
     e12:	80 95       	com	r24
     e14:	84 23       	and	r24, r20
     e16:	8c 93       	st	X, r24
     e18:	7b c0       	rjmp	.+246    	; 0xf10 <DIO_u8SetPinDirection+0x20a>
			default: Local_u8ErrorState=1; break;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	78 c0       	rjmp	.+240    	; 0xf10 <DIO_u8SetPinDirection+0x20a>

			}
		}
		else if(Copy_u8Direction == DIO_u8PIN_OUTPUT)
     e20:	8c 81       	ldd	r24, Y+4	; 0x04
     e22:	81 30       	cpi	r24, 0x01	; 1
     e24:	09 f0       	breq	.+2      	; 0xe28 <DIO_u8SetPinDirection+0x122>
     e26:	72 c0       	rjmp	.+228    	; 0xf0c <DIO_u8SetPinDirection+0x206>
		{
			switch(Copy_u8Port)
     e28:	8a 81       	ldd	r24, Y+2	; 0x02
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	3e 83       	std	Y+6, r19	; 0x06
     e30:	2d 83       	std	Y+5, r18	; 0x05
     e32:	8d 81       	ldd	r24, Y+5	; 0x05
     e34:	9e 81       	ldd	r25, Y+6	; 0x06
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	91 05       	cpc	r25, r1
     e3a:	49 f1       	breq	.+82     	; 0xe8e <DIO_u8SetPinDirection+0x188>
     e3c:	2d 81       	ldd	r18, Y+5	; 0x05
     e3e:	3e 81       	ldd	r19, Y+6	; 0x06
     e40:	22 30       	cpi	r18, 0x02	; 2
     e42:	31 05       	cpc	r19, r1
     e44:	2c f4       	brge	.+10     	; 0xe50 <DIO_u8SetPinDirection+0x14a>
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	9e 81       	ldd	r25, Y+6	; 0x06
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	61 f0       	breq	.+24     	; 0xe66 <DIO_u8SetPinDirection+0x160>
     e4e:	5b c0       	rjmp	.+182    	; 0xf06 <DIO_u8SetPinDirection+0x200>
     e50:	2d 81       	ldd	r18, Y+5	; 0x05
     e52:	3e 81       	ldd	r19, Y+6	; 0x06
     e54:	22 30       	cpi	r18, 0x02	; 2
     e56:	31 05       	cpc	r19, r1
     e58:	71 f1       	breq	.+92     	; 0xeb6 <DIO_u8SetPinDirection+0x1b0>
     e5a:	8d 81       	ldd	r24, Y+5	; 0x05
     e5c:	9e 81       	ldd	r25, Y+6	; 0x06
     e5e:	83 30       	cpi	r24, 0x03	; 3
     e60:	91 05       	cpc	r25, r1
     e62:	e9 f1       	breq	.+122    	; 0xede <DIO_u8SetPinDirection+0x1d8>
     e64:	50 c0       	rjmp	.+160    	; 0xf06 <DIO_u8SetPinDirection+0x200>
						{
						case DIO_u8PORTA: SET_BIT(DDRA,Copy_u8Pin); break;
     e66:	aa e3       	ldi	r26, 0x3A	; 58
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	ea e3       	ldi	r30, 0x3A	; 58
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <DIO_u8SetPinDirection+0x17e>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <DIO_u8SetPinDirection+0x17a>
     e88:	84 2b       	or	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	41 c0       	rjmp	.+130    	; 0xf10 <DIO_u8SetPinDirection+0x20a>
						case DIO_u8PORTB: SET_BIT(DDRB,Copy_u8Pin); break;
     e8e:	a7 e3       	ldi	r26, 0x37	; 55
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e7 e3       	ldi	r30, 0x37	; 55
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_u8SetPinDirection+0x1a6>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_u8SetPinDirection+0x1a2>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	2d c0       	rjmp	.+90     	; 0xf10 <DIO_u8SetPinDirection+0x20a>
						case DIO_u8PORTC: SET_BIT(DDRC,Copy_u8Pin); break;
     eb6:	a4 e3       	ldi	r26, 0x34	; 52
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e4 e3       	ldi	r30, 0x34	; 52
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	48 2f       	mov	r20, r24
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 2e       	mov	r0, r18
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <DIO_u8SetPinDirection+0x1ce>
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	0a 94       	dec	r0
     ed6:	e2 f7       	brpl	.-8      	; 0xed0 <DIO_u8SetPinDirection+0x1ca>
     ed8:	84 2b       	or	r24, r20
     eda:	8c 93       	st	X, r24
     edc:	19 c0       	rjmp	.+50     	; 0xf10 <DIO_u8SetPinDirection+0x20a>
						case DIO_u8PORTD: SET_BIT(DDRD,Copy_u8Pin); break;
     ede:	a1 e3       	ldi	r26, 0x31	; 49
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e1 e3       	ldi	r30, 0x31	; 49
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	48 2f       	mov	r20, r24
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 2e       	mov	r0, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_u8SetPinDirection+0x1f6>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	0a 94       	dec	r0
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_u8SetPinDirection+0x1f2>
     f00:	84 2b       	or	r24, r20
     f02:	8c 93       	st	X, r24
     f04:	05 c0       	rjmp	.+10     	; 0xf10 <DIO_u8SetPinDirection+0x20a>
						default: Local_u8ErrorState=1; break;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <DIO_u8SetPinDirection+0x20a>

						}
		}
		else
		{
			Local_u8ErrorState=1;
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState=0;
     f10:	19 82       	std	Y+1, r1	; 0x01
     f12:	89 81       	ldd	r24, Y+1	; 0x01
}
     f14:	28 96       	adiw	r28, 0x08	; 8
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <DIO_u8SetPortDirection>:
u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <DIO_u8SetPortDirection+0x6>
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <DIO_u8SetPortDirection+0x8>
     f2e:	0f 92       	push	r0
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	8a 83       	std	Y+2, r24	; 0x02
     f36:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
     f38:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	3d 83       	std	Y+5, r19	; 0x05
     f42:	2c 83       	std	Y+4, r18	; 0x04
     f44:	8c 81       	ldd	r24, Y+4	; 0x04
     f46:	9d 81       	ldd	r25, Y+5	; 0x05
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	91 05       	cpc	r25, r1
     f4c:	d1 f0       	breq	.+52     	; 0xf82 <DIO_u8SetPortDirection+0x5c>
     f4e:	2c 81       	ldd	r18, Y+4	; 0x04
     f50:	3d 81       	ldd	r19, Y+5	; 0x05
     f52:	22 30       	cpi	r18, 0x02	; 2
     f54:	31 05       	cpc	r19, r1
     f56:	2c f4       	brge	.+10     	; 0xf62 <DIO_u8SetPortDirection+0x3c>
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	9d 81       	ldd	r25, Y+5	; 0x05
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	61 f0       	breq	.+24     	; 0xf78 <DIO_u8SetPortDirection+0x52>
     f60:	1e c0       	rjmp	.+60     	; 0xf9e <DIO_u8SetPortDirection+0x78>
     f62:	2c 81       	ldd	r18, Y+4	; 0x04
     f64:	3d 81       	ldd	r19, Y+5	; 0x05
     f66:	22 30       	cpi	r18, 0x02	; 2
     f68:	31 05       	cpc	r19, r1
     f6a:	81 f0       	breq	.+32     	; 0xf8c <DIO_u8SetPortDirection+0x66>
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	9d 81       	ldd	r25, Y+5	; 0x05
     f70:	83 30       	cpi	r24, 0x03	; 3
     f72:	91 05       	cpc	r25, r1
     f74:	81 f0       	breq	.+32     	; 0xf96 <DIO_u8SetPortDirection+0x70>
     f76:	13 c0       	rjmp	.+38     	; 0xf9e <DIO_u8SetPortDirection+0x78>
	{
	case DIO_u8PORTA: DDRA = Copy_u8Direction; break;
     f78:	ea e3       	ldi	r30, 0x3A	; 58
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	80 83       	st	Z, r24
     f80:	0e c0       	rjmp	.+28     	; 0xf9e <DIO_u8SetPortDirection+0x78>
	case DIO_u8PORTB: DDRB = Copy_u8Direction; break;
     f82:	e7 e3       	ldi	r30, 0x37	; 55
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	80 83       	st	Z, r24
     f8a:	09 c0       	rjmp	.+18     	; 0xf9e <DIO_u8SetPortDirection+0x78>
	case DIO_u8PORTC: DDRC = Copy_u8Direction; break;
     f8c:	e4 e3       	ldi	r30, 0x34	; 52
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	80 83       	st	Z, r24
     f94:	04 c0       	rjmp	.+8      	; 0xf9e <DIO_u8SetPortDirection+0x78>
	case DIO_u8PORTD: DDRD = Copy_u8Direction; break;
     f96:	e1 e3       	ldi	r30, 0x31	; 49
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	80 83       	st	Z, r24

	}
	return Local_u8ErrorState;
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
}
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	28 97       	sbiw	r28, 0x08	; 8
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	8a 83       	std	Y+2, r24	; 0x02
     fc6:	6b 83       	std	Y+3, r22	; 0x03
     fc8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
     fca:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<= DIO_u8PIN7)
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	88 30       	cpi	r24, 0x08	; 8
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <DIO_u8SetPinValue+0x24>
     fd2:	f0 c0       	rjmp	.+480    	; 0x11b4 <DIO_u8SetPinValue+0x204>
		{
			if(Copy_u8Value==DIO_u8PIN_LOW)
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	88 23       	and	r24, r24
     fd8:	09 f0       	breq	.+2      	; 0xfdc <DIO_u8SetPinValue+0x2c>
     fda:	77 c0       	rjmp	.+238    	; 0x10ca <DIO_u8SetPinValue+0x11a>
			{
				switch(Copy_u8Port)
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	38 87       	std	Y+8, r19	; 0x08
     fe4:	2f 83       	std	Y+7, r18	; 0x07
     fe6:	8f 81       	ldd	r24, Y+7	; 0x07
     fe8:	98 85       	ldd	r25, Y+8	; 0x08
     fea:	81 30       	cpi	r24, 0x01	; 1
     fec:	91 05       	cpc	r25, r1
     fee:	59 f1       	breq	.+86     	; 0x1046 <DIO_u8SetPinValue+0x96>
     ff0:	2f 81       	ldd	r18, Y+7	; 0x07
     ff2:	38 85       	ldd	r19, Y+8	; 0x08
     ff4:	22 30       	cpi	r18, 0x02	; 2
     ff6:	31 05       	cpc	r19, r1
     ff8:	2c f4       	brge	.+10     	; 0x1004 <DIO_u8SetPinValue+0x54>
     ffa:	8f 81       	ldd	r24, Y+7	; 0x07
     ffc:	98 85       	ldd	r25, Y+8	; 0x08
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	69 f0       	breq	.+26     	; 0x101c <DIO_u8SetPinValue+0x6c>
    1002:	60 c0       	rjmp	.+192    	; 0x10c4 <DIO_u8SetPinValue+0x114>
    1004:	2f 81       	ldd	r18, Y+7	; 0x07
    1006:	38 85       	ldd	r19, Y+8	; 0x08
    1008:	22 30       	cpi	r18, 0x02	; 2
    100a:	31 05       	cpc	r19, r1
    100c:	89 f1       	breq	.+98     	; 0x1070 <DIO_u8SetPinValue+0xc0>
    100e:	8f 81       	ldd	r24, Y+7	; 0x07
    1010:	98 85       	ldd	r25, Y+8	; 0x08
    1012:	83 30       	cpi	r24, 0x03	; 3
    1014:	91 05       	cpc	r25, r1
    1016:	09 f4       	brne	.+2      	; 0x101a <DIO_u8SetPinValue+0x6a>
    1018:	40 c0       	rjmp	.+128    	; 0x109a <DIO_u8SetPinValue+0xea>
    101a:	54 c0       	rjmp	.+168    	; 0x10c4 <DIO_u8SetPinValue+0x114>
				{
				case DIO_u8PORTA: CLR_BIT(PORTA,Copy_u8Pin); break;
    101c:	ab e3       	ldi	r26, 0x3B	; 59
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	eb e3       	ldi	r30, 0x3B	; 59
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	48 2f       	mov	r20, r24
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	02 2e       	mov	r0, r18
    1034:	02 c0       	rjmp	.+4      	; 0x103a <DIO_u8SetPinValue+0x8a>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <DIO_u8SetPinValue+0x86>
    103e:	80 95       	com	r24
    1040:	84 23       	and	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	b7 c0       	rjmp	.+366    	; 0x11b4 <DIO_u8SetPinValue+0x204>
				case DIO_u8PORTB: CLR_BIT(PORTB,Copy_u8Pin); break;
    1046:	a8 e3       	ldi	r26, 0x38	; 56
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e8 e3       	ldi	r30, 0x38	; 56
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <DIO_u8SetPinValue+0xb4>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <DIO_u8SetPinValue+0xb0>
    1068:	80 95       	com	r24
    106a:	84 23       	and	r24, r20
    106c:	8c 93       	st	X, r24
    106e:	a2 c0       	rjmp	.+324    	; 0x11b4 <DIO_u8SetPinValue+0x204>
				case DIO_u8PORTC: CLR_BIT(PORTC,Copy_u8Pin); break;
    1070:	a5 e3       	ldi	r26, 0x35	; 53
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e5 e3       	ldi	r30, 0x35	; 53
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_u8SetPinValue+0xde>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_u8SetPinValue+0xda>
    1092:	80 95       	com	r24
    1094:	84 23       	and	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	8d c0       	rjmp	.+282    	; 0x11b4 <DIO_u8SetPinValue+0x204>
				case DIO_u8PORTD: CLR_BIT(PORTD,Copy_u8Pin); break;
    109a:	a2 e3       	ldi	r26, 0x32	; 50
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	e2 e3       	ldi	r30, 0x32	; 50
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <DIO_u8SetPinValue+0x108>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <DIO_u8SetPinValue+0x104>
    10bc:	80 95       	com	r24
    10be:	84 23       	and	r24, r20
    10c0:	8c 93       	st	X, r24
    10c2:	78 c0       	rjmp	.+240    	; 0x11b4 <DIO_u8SetPinValue+0x204>
				default: Local_u8ErrorState=1; break;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	75 c0       	rjmp	.+234    	; 0x11b4 <DIO_u8SetPinValue+0x204>

				}
			}
			else if(Copy_u8Value == DIO_u8PIN_HIGH)
    10ca:	8c 81       	ldd	r24, Y+4	; 0x04
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <DIO_u8SetPinValue+0x122>
    10d0:	71 c0       	rjmp	.+226    	; 0x11b4 <DIO_u8SetPinValue+0x204>
			{
				switch(Copy_u8Port)
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	3e 83       	std	Y+6, r19	; 0x06
    10da:	2d 83       	std	Y+5, r18	; 0x05
    10dc:	8d 81       	ldd	r24, Y+5	; 0x05
    10de:	9e 81       	ldd	r25, Y+6	; 0x06
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	91 05       	cpc	r25, r1
    10e4:	49 f1       	breq	.+82     	; 0x1138 <DIO_u8SetPinValue+0x188>
    10e6:	2d 81       	ldd	r18, Y+5	; 0x05
    10e8:	3e 81       	ldd	r19, Y+6	; 0x06
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	2c f4       	brge	.+10     	; 0x10fa <DIO_u8SetPinValue+0x14a>
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	9e 81       	ldd	r25, Y+6	; 0x06
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	61 f0       	breq	.+24     	; 0x1110 <DIO_u8SetPinValue+0x160>
    10f8:	5b c0       	rjmp	.+182    	; 0x11b0 <DIO_u8SetPinValue+0x200>
    10fa:	2d 81       	ldd	r18, Y+5	; 0x05
    10fc:	3e 81       	ldd	r19, Y+6	; 0x06
    10fe:	22 30       	cpi	r18, 0x02	; 2
    1100:	31 05       	cpc	r19, r1
    1102:	71 f1       	breq	.+92     	; 0x1160 <DIO_u8SetPinValue+0x1b0>
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	83 30       	cpi	r24, 0x03	; 3
    110a:	91 05       	cpc	r25, r1
    110c:	e9 f1       	breq	.+122    	; 0x1188 <DIO_u8SetPinValue+0x1d8>
    110e:	50 c0       	rjmp	.+160    	; 0x11b0 <DIO_u8SetPinValue+0x200>
							{
							case DIO_u8PORTA: SET_BIT(PORTA,Copy_u8Pin); break;
    1110:	ab e3       	ldi	r26, 0x3B	; 59
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	eb e3       	ldi	r30, 0x3B	; 59
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_u8SetPinValue+0x17e>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_u8SetPinValue+0x17a>
    1132:	84 2b       	or	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	3e c0       	rjmp	.+124    	; 0x11b4 <DIO_u8SetPinValue+0x204>
							case DIO_u8PORTB: SET_BIT(PORTB,Copy_u8Pin); break;
    1138:	a8 e3       	ldi	r26, 0x38	; 56
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e8 e3       	ldi	r30, 0x38	; 56
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_u8SetPinValue+0x1a6>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_u8SetPinValue+0x1a2>
    115a:	84 2b       	or	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	2a c0       	rjmp	.+84     	; 0x11b4 <DIO_u8SetPinValue+0x204>
							case DIO_u8PORTC: SET_BIT(PORTC,Copy_u8Pin); break;
    1160:	a5 e3       	ldi	r26, 0x35	; 53
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e5 e3       	ldi	r30, 0x35	; 53
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_u8SetPinValue+0x1ce>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_u8SetPinValue+0x1ca>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	16 c0       	rjmp	.+44     	; 0x11b4 <DIO_u8SetPinValue+0x204>
							case DIO_u8PORTD: SET_BIT(PORTD,Copy_u8Pin); break;
    1188:	a2 e3       	ldi	r26, 0x32	; 50
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e2 e3       	ldi	r30, 0x32	; 50
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <DIO_u8SetPinValue+0x1f6>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <DIO_u8SetPinValue+0x1f2>
    11aa:	84 2b       	or	r24, r20
    11ac:	8c 93       	st	X, r24
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <DIO_u8SetPinValue+0x204>
							default: Local_u8ErrorState=1; break;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	89 83       	std	Y+1, r24	; 0x01

							}
			}

}
	return Local_u8ErrorState;
    11b4:	89 81       	ldd	r24, Y+1	; 0x01

}
    11b6:	28 96       	adiw	r28, 0x08	; 8
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <DIO_u8SetPortValue+0x6>
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <DIO_u8SetPortValue+0x8>
    11d0:	0f 92       	push	r0
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	8a 83       	std	Y+2, r24	; 0x02
    11d8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    11da:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	3d 83       	std	Y+5, r19	; 0x05
    11e4:	2c 83       	std	Y+4, r18	; 0x04
    11e6:	8c 81       	ldd	r24, Y+4	; 0x04
    11e8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	91 05       	cpc	r25, r1
    11ee:	d1 f0       	breq	.+52     	; 0x1224 <DIO_u8SetPortValue+0x5c>
    11f0:	2c 81       	ldd	r18, Y+4	; 0x04
    11f2:	3d 81       	ldd	r19, Y+5	; 0x05
    11f4:	22 30       	cpi	r18, 0x02	; 2
    11f6:	31 05       	cpc	r19, r1
    11f8:	2c f4       	brge	.+10     	; 0x1204 <DIO_u8SetPortValue+0x3c>
    11fa:	8c 81       	ldd	r24, Y+4	; 0x04
    11fc:	9d 81       	ldd	r25, Y+5	; 0x05
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	61 f0       	breq	.+24     	; 0x121a <DIO_u8SetPortValue+0x52>
    1202:	1e c0       	rjmp	.+60     	; 0x1240 <DIO_u8SetPortValue+0x78>
    1204:	2c 81       	ldd	r18, Y+4	; 0x04
    1206:	3d 81       	ldd	r19, Y+5	; 0x05
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	81 f0       	breq	.+32     	; 0x122e <DIO_u8SetPortValue+0x66>
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	83 30       	cpi	r24, 0x03	; 3
    1214:	91 05       	cpc	r25, r1
    1216:	81 f0       	breq	.+32     	; 0x1238 <DIO_u8SetPortValue+0x70>
    1218:	13 c0       	rjmp	.+38     	; 0x1240 <DIO_u8SetPortValue+0x78>
		{
		case DIO_u8PORTA: PORTA = Copy_u8Value; break;
    121a:	eb e3       	ldi	r30, 0x3B	; 59
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	80 83       	st	Z, r24
    1222:	0e c0       	rjmp	.+28     	; 0x1240 <DIO_u8SetPortValue+0x78>
		case DIO_u8PORTB: PORTB = Copy_u8Value; break;
    1224:	e8 e3       	ldi	r30, 0x38	; 56
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	80 83       	st	Z, r24
    122c:	09 c0       	rjmp	.+18     	; 0x1240 <DIO_u8SetPortValue+0x78>
		case DIO_u8PORTC: PORTC = Copy_u8Value; break;
    122e:	e5 e3       	ldi	r30, 0x35	; 53
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	80 83       	st	Z, r24
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <DIO_u8SetPortValue+0x78>
		case DIO_u8PORTD: PORTD = Copy_u8Value; break;
    1238:	e2 e3       	ldi	r30, 0x32	; 50
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	80 83       	st	Z, r24

		}
	return Local_u8ErrorState;
    1240:	89 81       	ldd	r24, Y+1	; 0x01

}
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <DIO_u8GetPinValue>:
	return Local_u8ErrorState;
}
*/

u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	00 d0       	rcall	.+0      	; 0x1258 <DIO_u8GetPinValue+0x6>
    1258:	00 d0       	rcall	.+0      	; 0x125a <DIO_u8GetPinValue+0x8>
    125a:	0f 92       	push	r0
    125c:	cd b7       	in	r28, 0x3d	; 61
    125e:	de b7       	in	r29, 0x3e	; 62
    1260:	8a 83       	std	Y+2, r24	; 0x02
    1262:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_return_data=0;
    1264:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Port <= DIO_u8PORTD) && (Copy_u8Pin <= DIO_u8PIN7))
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	84 30       	cpi	r24, 0x04	; 4
    126a:	08 f0       	brcs	.+2      	; 0x126e <DIO_u8GetPinValue+0x1c>
    126c:	6b c0       	rjmp	.+214    	; 0x1344 <DIO_u8GetPinValue+0xf2>
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	88 30       	cpi	r24, 0x08	; 8
    1272:	08 f0       	brcs	.+2      	; 0x1276 <DIO_u8GetPinValue+0x24>
    1274:	67 c0       	rjmp	.+206    	; 0x1344 <DIO_u8GetPinValue+0xf2>
	{
		switch(Copy_u8Port)
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	3d 83       	std	Y+5, r19	; 0x05
    127e:	2c 83       	std	Y+4, r18	; 0x04
    1280:	4c 81       	ldd	r20, Y+4	; 0x04
    1282:	5d 81       	ldd	r21, Y+5	; 0x05
    1284:	41 30       	cpi	r20, 0x01	; 1
    1286:	51 05       	cpc	r21, r1
    1288:	41 f1       	breq	.+80     	; 0x12da <DIO_u8GetPinValue+0x88>
    128a:	8c 81       	ldd	r24, Y+4	; 0x04
    128c:	9d 81       	ldd	r25, Y+5	; 0x05
    128e:	82 30       	cpi	r24, 0x02	; 2
    1290:	91 05       	cpc	r25, r1
    1292:	34 f4       	brge	.+12     	; 0x12a0 <DIO_u8GetPinValue+0x4e>
    1294:	2c 81       	ldd	r18, Y+4	; 0x04
    1296:	3d 81       	ldd	r19, Y+5	; 0x05
    1298:	21 15       	cp	r18, r1
    129a:	31 05       	cpc	r19, r1
    129c:	61 f0       	breq	.+24     	; 0x12b6 <DIO_u8GetPinValue+0x64>
    129e:	52 c0       	rjmp	.+164    	; 0x1344 <DIO_u8GetPinValue+0xf2>
    12a0:	4c 81       	ldd	r20, Y+4	; 0x04
    12a2:	5d 81       	ldd	r21, Y+5	; 0x05
    12a4:	42 30       	cpi	r20, 0x02	; 2
    12a6:	51 05       	cpc	r21, r1
    12a8:	51 f1       	breq	.+84     	; 0x12fe <DIO_u8GetPinValue+0xac>
    12aa:	8c 81       	ldd	r24, Y+4	; 0x04
    12ac:	9d 81       	ldd	r25, Y+5	; 0x05
    12ae:	83 30       	cpi	r24, 0x03	; 3
    12b0:	91 05       	cpc	r25, r1
    12b2:	b9 f1       	breq	.+110    	; 0x1322 <DIO_u8GetPinValue+0xd0>
    12b4:	47 c0       	rjmp	.+142    	; 0x1344 <DIO_u8GetPinValue+0xf2>
		{
		case DIO_u8PORTA: Local_return_data= GET_BIT(PINA , Copy_u8Pin); break;
    12b6:	e9 e3       	ldi	r30, 0x39	; 57
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	88 2f       	mov	r24, r24
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	a9 01       	movw	r20, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <DIO_u8GetPinValue+0x7c>
    12ca:	55 95       	asr	r21
    12cc:	47 95       	ror	r20
    12ce:	8a 95       	dec	r24
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <DIO_u8GetPinValue+0x78>
    12d2:	ca 01       	movw	r24, r20
    12d4:	81 70       	andi	r24, 0x01	; 1
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	35 c0       	rjmp	.+106    	; 0x1344 <DIO_u8GetPinValue+0xf2>
		case DIO_u8PORTB: Local_return_data= GET_BIT(PINB , Copy_u8Pin); break;
    12da:	e6 e3       	ldi	r30, 0x36	; 54
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	28 2f       	mov	r18, r24
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	88 2f       	mov	r24, r24
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	a9 01       	movw	r20, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_u8GetPinValue+0xa0>
    12ee:	55 95       	asr	r21
    12f0:	47 95       	ror	r20
    12f2:	8a 95       	dec	r24
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_u8GetPinValue+0x9c>
    12f6:	ca 01       	movw	r24, r20
    12f8:	81 70       	andi	r24, 0x01	; 1
    12fa:	89 83       	std	Y+1, r24	; 0x01
    12fc:	23 c0       	rjmp	.+70     	; 0x1344 <DIO_u8GetPinValue+0xf2>
		case DIO_u8PORTC: Local_return_data= GET_BIT(PINC , Copy_u8Pin); break;
    12fe:	e3 e3       	ldi	r30, 0x33	; 51
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	88 2f       	mov	r24, r24
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	a9 01       	movw	r20, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_u8GetPinValue+0xc4>
    1312:	55 95       	asr	r21
    1314:	47 95       	ror	r20
    1316:	8a 95       	dec	r24
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_u8GetPinValue+0xc0>
    131a:	ca 01       	movw	r24, r20
    131c:	81 70       	andi	r24, 0x01	; 1
    131e:	89 83       	std	Y+1, r24	; 0x01
    1320:	11 c0       	rjmp	.+34     	; 0x1344 <DIO_u8GetPinValue+0xf2>
		case DIO_u8PORTD: Local_return_data= GET_BIT(PIND , Copy_u8Pin); break;
    1322:	e0 e3       	ldi	r30, 0x30	; 48
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 2f       	mov	r24, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	a9 01       	movw	r20, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_u8GetPinValue+0xe8>
    1336:	55 95       	asr	r21
    1338:	47 95       	ror	r20
    133a:	8a 95       	dec	r24
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_u8GetPinValue+0xe4>
    133e:	ca 01       	movw	r24, r20
    1340:	81 70       	andi	r24, 0x01	; 1
    1342:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		//Local_u8ErrorState=1;
	}
	return Local_return_data;
    1344:	89 81       	ldd	r24, Y+1	; 0x01
}
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <CLCD_voidSendCommand>:
#include"CLCD_Interface.h"
#include"CLCD_Private.h"
#include <util/delay.h>

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	2f 97       	sbiw	r28, 0x0f	; 15
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to low for sending commands*/
	DIO_u8SetPortDirection(CLCD_CTRL_PORT,DIO_u8PORT_OUTPUT);
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	6f ef       	ldi	r22, 0xFF	; 255
    1370:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPortDirection>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>

	/*SET RW pin to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	61 e0       	ldi	r22, 0x01	; 1
    1382:	40 e0       	ldi	r20, 0x00	; 0
    1384:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>

	/*Send command to data pins*/
	DIO_u8SetPortDirection(CLCD_DATA_PORT,DIO_u8PORT_OUTPUT);
    1388:	82 e0       	ldi	r24, 0x02	; 2
    138a:	6f ef       	ldi	r22, 0xFF	; 255
    138c:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPortDirection>
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
    1390:	8f 85       	ldd	r24, Y+15	; 0x0f
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	b9 01       	movw	r22, r18
    139c:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <DIO_u8SetPortValue>
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	62 e0       	ldi	r22, 0x02	; 2
    13a4:	41 e0       	ldi	r20, 0x01	; 1
    13a6:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	a0 e0       	ldi	r26, 0x00	; 0
    13b0:	b0 e4       	ldi	r27, 0x40	; 64
    13b2:	8b 87       	std	Y+11, r24	; 0x0b
    13b4:	9c 87       	std	Y+12, r25	; 0x0c
    13b6:	ad 87       	std	Y+13, r26	; 0x0d
    13b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    13bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    13be:	8d 85       	ldd	r24, Y+13	; 0x0d
    13c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	4a ef       	ldi	r20, 0xFA	; 250
    13c8:	54 e4       	ldi	r21, 0x44	; 68
    13ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	8f 83       	std	Y+7, r24	; 0x07
    13d4:	98 87       	std	Y+8, r25	; 0x08
    13d6:	a9 87       	std	Y+9, r26	; 0x09
    13d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13da:	6f 81       	ldd	r22, Y+7	; 0x07
    13dc:	78 85       	ldd	r23, Y+8	; 0x08
    13de:	89 85       	ldd	r24, Y+9	; 0x09
    13e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e8       	ldi	r20, 0x80	; 128
    13e8:	5f e3       	ldi	r21, 0x3F	; 63
    13ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ee:	88 23       	and	r24, r24
    13f0:	2c f4       	brge	.+10     	; 0x13fc <CLCD_voidSendCommand+0xa6>
		__ticks = 1;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	9e 83       	std	Y+6, r25	; 0x06
    13f8:	8d 83       	std	Y+5, r24	; 0x05
    13fa:	3f c0       	rjmp	.+126    	; 0x147a <CLCD_voidSendCommand+0x124>
	else if (__tmp > 65535)
    13fc:	6f 81       	ldd	r22, Y+7	; 0x07
    13fe:	78 85       	ldd	r23, Y+8	; 0x08
    1400:	89 85       	ldd	r24, Y+9	; 0x09
    1402:	9a 85       	ldd	r25, Y+10	; 0x0a
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	3f ef       	ldi	r19, 0xFF	; 255
    1408:	4f e7       	ldi	r20, 0x7F	; 127
    140a:	57 e4       	ldi	r21, 0x47	; 71
    140c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1410:	18 16       	cp	r1, r24
    1412:	4c f5       	brge	.+82     	; 0x1466 <CLCD_voidSendCommand+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1414:	6b 85       	ldd	r22, Y+11	; 0x0b
    1416:	7c 85       	ldd	r23, Y+12	; 0x0c
    1418:	8d 85       	ldd	r24, Y+13	; 0x0d
    141a:	9e 85       	ldd	r25, Y+14	; 0x0e
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e2       	ldi	r20, 0x20	; 32
    1422:	51 e4       	ldi	r21, 0x41	; 65
    1424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1428:	dc 01       	movw	r26, r24
    142a:	cb 01       	movw	r24, r22
    142c:	bc 01       	movw	r22, r24
    142e:	cd 01       	movw	r24, r26
    1430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	9e 83       	std	Y+6, r25	; 0x06
    143a:	8d 83       	std	Y+5, r24	; 0x05
    143c:	0f c0       	rjmp	.+30     	; 0x145c <CLCD_voidSendCommand+0x106>
    143e:	88 ec       	ldi	r24, 0xC8	; 200
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	9c 83       	std	Y+4, r25	; 0x04
    1444:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <CLCD_voidSendCommand+0xf4>
    144e:	9c 83       	std	Y+4, r25	; 0x04
    1450:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	9e 83       	std	Y+6, r25	; 0x06
    145a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	00 97       	sbiw	r24, 0x00	; 0
    1462:	69 f7       	brne	.-38     	; 0x143e <CLCD_voidSendCommand+0xe8>
    1464:	14 c0       	rjmp	.+40     	; 0x148e <CLCD_voidSendCommand+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1466:	6f 81       	ldd	r22, Y+7	; 0x07
    1468:	78 85       	ldd	r23, Y+8	; 0x08
    146a:	89 85       	ldd	r24, Y+9	; 0x09
    146c:	9a 85       	ldd	r25, Y+10	; 0x0a
    146e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	9e 83       	std	Y+6, r25	; 0x06
    1478:	8d 83       	std	Y+5, r24	; 0x05
    147a:	8d 81       	ldd	r24, Y+5	; 0x05
    147c:	9e 81       	ldd	r25, Y+6	; 0x06
    147e:	9a 83       	std	Y+2, r25	; 0x02
    1480:	89 83       	std	Y+1, r24	; 0x01
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	01 97       	sbiw	r24, 0x01	; 1
    1488:	f1 f7       	brne	.-4      	; 0x1486 <CLCD_voidSendCommand+0x130>
    148a:	9a 83       	std	Y+2, r25	; 0x02
    148c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	62 e0       	ldi	r22, 0x02	; 2
    1492:	40 e0       	ldi	r20, 0x00	; 0
    1494:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
}
    1498:	2f 96       	adiw	r28, 0x0f	; 15
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
    14b2:	2f 97       	sbiw	r28, 0x0f	; 15
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	8f 87       	std	Y+15, r24	; 0x0f
	/*set RS pin to high for sending data*/

		DIO_u8SetPortDirection(CLCD_CTRL_PORT,DIO_u8PORT_OUTPUT);
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	6f ef       	ldi	r22, 0xFF	; 255
    14c4:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPortDirection>

		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	41 e0       	ldi	r20, 0x01	; 1
    14ce:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>

		/*SET RW pin to low for write*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	61 e0       	ldi	r22, 0x01	; 1
    14d6:	40 e0       	ldi	r20, 0x00	; 0
    14d8:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>

		/*Send data to data pins*/
		DIO_u8SetPortDirection(CLCD_DATA_PORT,DIO_u8PORT_OUTPUT);
    14dc:	82 e0       	ldi	r24, 0x02	; 2
    14de:	6f ef       	ldi	r22, 0xFF	; 255
    14e0:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPortDirection>

		DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
    14e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	82 e0       	ldi	r24, 0x02	; 2
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	b9 01       	movw	r22, r18
    14f0:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <DIO_u8SetPortValue>
		/*Send enable pulse*/
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	62 e0       	ldi	r22, 0x02	; 2
    14f8:	41 e0       	ldi	r20, 0x01	; 1
    14fa:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a0 e0       	ldi	r26, 0x00	; 0
    1504:	b0 e4       	ldi	r27, 0x40	; 64
    1506:	8b 87       	std	Y+11, r24	; 0x0b
    1508:	9c 87       	std	Y+12, r25	; 0x0c
    150a:	ad 87       	std	Y+13, r26	; 0x0d
    150c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1510:	7c 85       	ldd	r23, Y+12	; 0x0c
    1512:	8d 85       	ldd	r24, Y+13	; 0x0d
    1514:	9e 85       	ldd	r25, Y+14	; 0x0e
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	4a ef       	ldi	r20, 0xFA	; 250
    151c:	54 e4       	ldi	r21, 0x44	; 68
    151e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	8f 83       	std	Y+7, r24	; 0x07
    1528:	98 87       	std	Y+8, r25	; 0x08
    152a:	a9 87       	std	Y+9, r26	; 0x09
    152c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    152e:	6f 81       	ldd	r22, Y+7	; 0x07
    1530:	78 85       	ldd	r23, Y+8	; 0x08
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	9a 85       	ldd	r25, Y+10	; 0x0a
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e8       	ldi	r20, 0x80	; 128
    153c:	5f e3       	ldi	r21, 0x3F	; 63
    153e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1542:	88 23       	and	r24, r24
    1544:	2c f4       	brge	.+10     	; 0x1550 <CLCD_voidSendData+0xa6>
		__ticks = 1;
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	9e 83       	std	Y+6, r25	; 0x06
    154c:	8d 83       	std	Y+5, r24	; 0x05
    154e:	3f c0       	rjmp	.+126    	; 0x15ce <CLCD_voidSendData+0x124>
	else if (__tmp > 65535)
    1550:	6f 81       	ldd	r22, Y+7	; 0x07
    1552:	78 85       	ldd	r23, Y+8	; 0x08
    1554:	89 85       	ldd	r24, Y+9	; 0x09
    1556:	9a 85       	ldd	r25, Y+10	; 0x0a
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	3f ef       	ldi	r19, 0xFF	; 255
    155c:	4f e7       	ldi	r20, 0x7F	; 127
    155e:	57 e4       	ldi	r21, 0x47	; 71
    1560:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1564:	18 16       	cp	r1, r24
    1566:	4c f5       	brge	.+82     	; 0x15ba <CLCD_voidSendData+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1568:	6b 85       	ldd	r22, Y+11	; 0x0b
    156a:	7c 85       	ldd	r23, Y+12	; 0x0c
    156c:	8d 85       	ldd	r24, Y+13	; 0x0d
    156e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e2       	ldi	r20, 0x20	; 32
    1576:	51 e4       	ldi	r21, 0x41	; 65
    1578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	bc 01       	movw	r22, r24
    1582:	cd 01       	movw	r24, r26
    1584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	9e 83       	std	Y+6, r25	; 0x06
    158e:	8d 83       	std	Y+5, r24	; 0x05
    1590:	0f c0       	rjmp	.+30     	; 0x15b0 <CLCD_voidSendData+0x106>
    1592:	88 ec       	ldi	r24, 0xC8	; 200
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	9c 83       	std	Y+4, r25	; 0x04
    1598:	8b 83       	std	Y+3, r24	; 0x03
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <CLCD_voidSendData+0xf4>
    15a2:	9c 83       	std	Y+4, r25	; 0x04
    15a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a6:	8d 81       	ldd	r24, Y+5	; 0x05
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	9e 83       	std	Y+6, r25	; 0x06
    15ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	9e 81       	ldd	r25, Y+6	; 0x06
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	69 f7       	brne	.-38     	; 0x1592 <CLCD_voidSendData+0xe8>
    15b8:	14 c0       	rjmp	.+40     	; 0x15e2 <CLCD_voidSendData+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ba:	6f 81       	ldd	r22, Y+7	; 0x07
    15bc:	78 85       	ldd	r23, Y+8	; 0x08
    15be:	89 85       	ldd	r24, Y+9	; 0x09
    15c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	9e 83       	std	Y+6, r25	; 0x06
    15cc:	8d 83       	std	Y+5, r24	; 0x05
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	9e 81       	ldd	r25, Y+6	; 0x06
    15d2:	9a 83       	std	Y+2, r25	; 0x02
    15d4:	89 83       	std	Y+1, r24	; 0x01
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	9a 81       	ldd	r25, Y+2	; 0x02
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <CLCD_voidSendData+0x130>
    15de:	9a 83       	std	Y+2, r25	; 0x02
    15e0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	62 e0       	ldi	r22, 0x02	; 2
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
}
    15ec:	2f 96       	adiw	r28, 0x0f	; 15
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	2e 97       	sbiw	r28, 0x0e	; 14
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	a0 e2       	ldi	r26, 0x20	; 32
    1618:	b2 e4       	ldi	r27, 0x42	; 66
    161a:	8b 87       	std	Y+11, r24	; 0x0b
    161c:	9c 87       	std	Y+12, r25	; 0x0c
    161e:	ad 87       	std	Y+13, r26	; 0x0d
    1620:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1622:	6b 85       	ldd	r22, Y+11	; 0x0b
    1624:	7c 85       	ldd	r23, Y+12	; 0x0c
    1626:	8d 85       	ldd	r24, Y+13	; 0x0d
    1628:	9e 85       	ldd	r25, Y+14	; 0x0e
    162a:	20 e0       	ldi	r18, 0x00	; 0
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	4a ef       	ldi	r20, 0xFA	; 250
    1630:	54 e4       	ldi	r21, 0x44	; 68
    1632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	8f 83       	std	Y+7, r24	; 0x07
    163c:	98 87       	std	Y+8, r25	; 0x08
    163e:	a9 87       	std	Y+9, r26	; 0x09
    1640:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1642:	6f 81       	ldd	r22, Y+7	; 0x07
    1644:	78 85       	ldd	r23, Y+8	; 0x08
    1646:	89 85       	ldd	r24, Y+9	; 0x09
    1648:	9a 85       	ldd	r25, Y+10	; 0x0a
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e8       	ldi	r20, 0x80	; 128
    1650:	5f e3       	ldi	r21, 0x3F	; 63
    1652:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1656:	88 23       	and	r24, r24
    1658:	2c f4       	brge	.+10     	; 0x1664 <CLCD_voidInit+0x66>
		__ticks = 1;
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	9e 83       	std	Y+6, r25	; 0x06
    1660:	8d 83       	std	Y+5, r24	; 0x05
    1662:	3f c0       	rjmp	.+126    	; 0x16e2 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1664:	6f 81       	ldd	r22, Y+7	; 0x07
    1666:	78 85       	ldd	r23, Y+8	; 0x08
    1668:	89 85       	ldd	r24, Y+9	; 0x09
    166a:	9a 85       	ldd	r25, Y+10	; 0x0a
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	3f ef       	ldi	r19, 0xFF	; 255
    1670:	4f e7       	ldi	r20, 0x7F	; 127
    1672:	57 e4       	ldi	r21, 0x47	; 71
    1674:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1678:	18 16       	cp	r1, r24
    167a:	4c f5       	brge	.+82     	; 0x16ce <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167c:	6b 85       	ldd	r22, Y+11	; 0x0b
    167e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1680:	8d 85       	ldd	r24, Y+13	; 0x0d
    1682:	9e 85       	ldd	r25, Y+14	; 0x0e
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e2       	ldi	r20, 0x20	; 32
    168a:	51 e4       	ldi	r21, 0x41	; 65
    168c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	bc 01       	movw	r22, r24
    1696:	cd 01       	movw	r24, r26
    1698:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	9e 83       	std	Y+6, r25	; 0x06
    16a2:	8d 83       	std	Y+5, r24	; 0x05
    16a4:	0f c0       	rjmp	.+30     	; 0x16c4 <CLCD_voidInit+0xc6>
    16a6:	88 ec       	ldi	r24, 0xC8	; 200
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	9c 83       	std	Y+4, r25	; 0x04
    16ac:	8b 83       	std	Y+3, r24	; 0x03
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	01 97       	sbiw	r24, 0x01	; 1
    16b4:	f1 f7       	brne	.-4      	; 0x16b2 <CLCD_voidInit+0xb4>
    16b6:	9c 83       	std	Y+4, r25	; 0x04
    16b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ba:	8d 81       	ldd	r24, Y+5	; 0x05
    16bc:	9e 81       	ldd	r25, Y+6	; 0x06
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	9e 83       	std	Y+6, r25	; 0x06
    16c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c4:	8d 81       	ldd	r24, Y+5	; 0x05
    16c6:	9e 81       	ldd	r25, Y+6	; 0x06
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	69 f7       	brne	.-38     	; 0x16a6 <CLCD_voidInit+0xa8>
    16cc:	14 c0       	rjmp	.+40     	; 0x16f6 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ce:	6f 81       	ldd	r22, Y+7	; 0x07
    16d0:	78 85       	ldd	r23, Y+8	; 0x08
    16d2:	89 85       	ldd	r24, Y+9	; 0x09
    16d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16da:	dc 01       	movw	r26, r24
    16dc:	cb 01       	movw	r24, r22
    16de:	9e 83       	std	Y+6, r25	; 0x06
    16e0:	8d 83       	std	Y+5, r24	; 0x05
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	9e 81       	ldd	r25, Y+6	; 0x06
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <CLCD_voidInit+0xf0>
    16f2:	9a 83       	std	Y+2, r25	; 0x02
    16f4:	89 83       	std	Y+1, r24	; 0x01
	/*wait for more than 30 ms*/
	_delay_ms(40);

	/*Function set command: 2lines and 5*8 font size*/
	CLCD_voidSendCommand(0b00111000);
    16f6:	88 e3       	ldi	r24, 0x38	; 56
    16f8:	0e 94 ab 09 	call	0x1356	; 0x1356 <CLCD_voidSendCommand>

	/*Display on off control display enable,disable cursor and no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
    16fc:	8c e0       	ldi	r24, 0x0C	; 12
    16fe:	0e 94 ab 09 	call	0x1356	; 0x1356 <CLCD_voidSendCommand>

	/*clear display*/
	CLCD_voidSendCommand(0b00000001);
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	0e 94 ab 09 	call	0x1356	; 0x1356 <CLCD_voidSendCommand>


}
    1708:	2e 96       	adiw	r28, 0x0e	; 14
    170a:	0f b6       	in	r0, 0x3f	; 63
    170c:	f8 94       	cli
    170e:	de bf       	out	0x3e, r29	; 62
    1710:	0f be       	out	0x3f, r0	; 63
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <CLCD_voidSendString>:

void CLCD_voidSendString(char *string)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	00 d0       	rcall	.+0      	; 0x1720 <CLCD_voidSendString+0x6>
    1720:	0f 92       	push	r0
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	9b 83       	std	Y+3, r25	; 0x03
    1728:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter;
	for(counter=0;string[counter]!=0;counter++)
    172a:	19 82       	std	Y+1, r1	; 0x01
    172c:	0e c0       	rjmp	.+28     	; 0x174a <CLCD_voidSendString+0x30>
	{
		CLCD_voidSendData(string[counter]);
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	9b 81       	ldd	r25, Y+3	; 0x03
    1738:	fc 01       	movw	r30, r24
    173a:	e2 0f       	add	r30, r18
    173c:	f3 1f       	adc	r31, r19
    173e:	80 81       	ld	r24, Z
    1740:	0e 94 55 0a 	call	0x14aa	; 0x14aa <CLCD_voidSendData>
}

void CLCD_voidSendString(char *string)
{
	u8 counter;
	for(counter=0;string[counter]!=0;counter++)
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	8f 5f       	subi	r24, 0xFF	; 255
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	89 81       	ldd	r24, Y+1	; 0x01
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	9b 81       	ldd	r25, Y+3	; 0x03
    1754:	fc 01       	movw	r30, r24
    1756:	e2 0f       	add	r30, r18
    1758:	f3 1f       	adc	r31, r19
    175a:	80 81       	ld	r24, Z
    175c:	88 23       	and	r24, r24
    175e:	39 f7       	brne	.-50     	; 0x172e <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(string[counter]);
	}
}
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <CLCD_voidSendNumber>:
}

*/

void CLCD_voidSendNumber(u8 *Copy_u8Num)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	00 d0       	rcall	.+0      	; 0x1772 <CLCD_voidSendNumber+0x6>
    1772:	0f 92       	push	r0
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	9b 83       	std	Y+3, r25	; 0x03
    177a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Copy_u8Num[Local_u8Counter]!=0;Local_u8Counter++)
    177c:	19 82       	std	Y+1, r1	; 0x01
    177e:	0f c0       	rjmp	.+30     	; 0x179e <CLCD_voidSendNumber+0x32>
	{
		CLCD_voidSendData(Copy_u8Num[Local_u8Counter]+'0');
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	9b 81       	ldd	r25, Y+3	; 0x03
    178a:	fc 01       	movw	r30, r24
    178c:	e2 0f       	add	r30, r18
    178e:	f3 1f       	adc	r31, r19
    1790:	80 81       	ld	r24, Z
    1792:	80 5d       	subi	r24, 0xD0	; 208
    1794:	0e 94 55 0a 	call	0x14aa	; 0x14aa <CLCD_voidSendData>
*/

void CLCD_voidSendNumber(u8 *Copy_u8Num)
{
	u8 Local_u8Counter;
	for(Local_u8Counter=0;Copy_u8Num[Local_u8Counter]!=0;Local_u8Counter++)
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	8f 5f       	subi	r24, 0xFF	; 255
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	9b 81       	ldd	r25, Y+3	; 0x03
    17a8:	fc 01       	movw	r30, r24
    17aa:	e2 0f       	add	r30, r18
    17ac:	f3 1f       	adc	r31, r19
    17ae:	80 81       	ld	r24, Z
    17b0:	88 23       	and	r24, r24
    17b2:	31 f7       	brne	.-52     	; 0x1780 <CLCD_voidSendNumber+0x14>
	{
		CLCD_voidSendData(Copy_u8Num[Local_u8Counter]+'0');
	}
}
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay(void)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	0f 92       	push	r0
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
	u8 data_clear_display= 0x01;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(data_clear_display);
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	0e 94 ab 09 	call	0x1356	; 0x1356 <CLCD_voidSendCommand>
}
    17d4:	0f 90       	pop	r0
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <CLCD_voidGoToXY>:


void CLCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <CLCD_voidGoToXY+0x6>
    17e2:	0f 92       	push	r0
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	8a 83       	std	Y+2, r24	; 0x02
    17ea:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos == 0)
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	88 23       	and	r24, r24
    17f0:	19 f4       	brne	.+6      	; 0x17f8 <CLCD_voidGoToXY+0x1c>
	{
		Local_u8Address = Copy_u8YPos;
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	89 83       	std	Y+1, r24	; 0x01
    17f6:	06 c0       	rjmp	.+12     	; 0x1804 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos == 1)
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	81 30       	cpi	r24, 0x01	; 1
    17fc:	19 f4       	brne	.+6      	; 0x1804 <CLCD_voidGoToXY+0x28>
	{
		Local_u8Address = Copy_u8YPos + 0x40;
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	80 5c       	subi	r24, 0xC0	; 192
    1802:	89 83       	std	Y+1, r24	; 0x01
	}
	//128 Is added to the address to set the most significant bit by 1 according to DDRAM address instruction
	CLCD_voidSendCommand(Local_u8Address+128);
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	80 58       	subi	r24, 0x80	; 128
    1808:	0e 94 ab 09 	call	0x1356	; 0x1356 <CLCD_voidSendCommand>
}
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <CLCD_voidWriteSpecialChar>:

void CLCD_voidWriteSpecialChar(u8 *Copy_u8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	27 97       	sbiw	r28, 0x07	; 7
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	9c 83       	std	Y+4, r25	; 0x04
    182e:	8b 83       	std	Y+3, r24	; 0x03
    1830:	6d 83       	std	Y+5, r22	; 0x05
    1832:	4e 83       	std	Y+6, r20	; 0x06
    1834:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8Iterator;
	/*first calculate CGRAM address whose each block is 8 bytes*/
	u8 Local_u8CGRamAddress =0;
    1836:	19 82       	std	Y+1, r1	; 0x01
	Local_u8CGRamAddress = Copy_u8PatternNumber*8;
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	88 2f       	mov	r24, r24
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	89 83       	std	Y+1, r24	; 0x01

	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	CLCD_voidSendCommand(Local_u8CGRamAddress+64);
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	80 5c       	subi	r24, 0xC0	; 192
    1850:	0e 94 ab 09 	call	0x1356	; 0x1356 <CLCD_voidSendCommand>
	/*Write the pattern into CG ram*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    1854:	1a 82       	std	Y+2, r1	; 0x02
    1856:	0e c0       	rjmp	.+28     	; 0x1874 <CLCD_voidWriteSpecialChar+0x5c>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8Iterator]);
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	fc 01       	movw	r30, r24
    1864:	e2 0f       	add	r30, r18
    1866:	f3 1f       	adc	r31, r19
    1868:	80 81       	ld	r24, Z
    186a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <CLCD_voidSendData>
	Local_u8CGRamAddress = Copy_u8PatternNumber*8;

	/*Access CGRAM block using function Send command by setting bit 6 and clearing bit7*/
	CLCD_voidSendCommand(Local_u8CGRamAddress+64);
	/*Write the pattern into CG ram*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	8f 5f       	subi	r24, 0xFF	; 255
    1872:	8a 83       	std	Y+2, r24	; 0x02
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	88 30       	cpi	r24, 0x08	; 8
    1878:	78 f3       	brcs	.-34     	; 0x1858 <CLCD_voidWriteSpecialChar+0x40>
	{
		CLCD_voidSendData(Copy_u8Pattern[Local_u8Iterator]);
	}

	/*Access the DDRAM again To display the pattern since the gotoxy function is carrying a function to access DDRAM*/
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    187a:	8e 81       	ldd	r24, Y+6	; 0x06
    187c:	6f 81       	ldd	r22, Y+7	; 0x07
    187e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <CLCD_voidGoToXY>
	/*Display the pattern written in the CG RAM*/
	CLCD_voidSendData(Copy_u8PatternNumber);
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	0e 94 55 0a 	call	0x14aa	; 0x14aa <CLCD_voidSendData>


}
    1888:	27 96       	adiw	r28, 0x07	; 7
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <KEYPAD_Init>:
#include"Keypad_interface.h"
#include"Keypad_private.h"
#include<util/delay.h>

void KEYPAD_Init(void)
{
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
	/*Define Row bins as Input*/
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_INPUT);
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	60 e0       	ldi	r22, 0x00	; 0
    18a6:	40 e0       	ldi	r20, 0x00	; 0
    18a8:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN1,DIO_u8PIN_INPUT);
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	61 e0       	ldi	r22, 0x01	; 1
    18b0:	40 e0       	ldi	r20, 0x00	; 0
    18b2:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN2,DIO_u8PIN_INPUT);
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	62 e0       	ldi	r22, 0x02	; 2
    18ba:	40 e0       	ldi	r20, 0x00	; 0
    18bc:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_INPUT);
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	63 e0       	ldi	r22, 0x03	; 3
    18c4:	40 e0       	ldi	r20, 0x00	; 0
    18c6:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>
	/*Define column pins as OUTPUT*/
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_OUTPUT);
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	64 e0       	ldi	r22, 0x04	; 4
    18ce:	41 e0       	ldi	r20, 0x01	; 1
    18d0:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_OUTPUT);
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	65 e0       	ldi	r22, 0x05	; 5
    18d8:	41 e0       	ldi	r20, 0x01	; 1
    18da:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN6,DIO_u8PIN_OUTPUT);
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	66 e0       	ldi	r22, 0x06	; 6
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_u8PORTA,DIO_u8PIN7,DIO_u8PIN_OUTPUT);
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	67 e0       	ldi	r22, 0x07	; 7
    18ec:	41 e0       	ldi	r20, 0x01	; 1
    18ee:	0e 94 83 06 	call	0xd06	; 0xd06 <DIO_u8SetPinDirection>
	/*Define Row bins as pulled up*/
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN0,DIO_u8PIN_HIGH);
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	41 e0       	ldi	r20, 0x01	; 1
    18f8:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN1,DIO_u8PIN_HIGH);
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	41 e0       	ldi	r20, 0x01	; 1
    1902:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN2,DIO_u8PIN_HIGH);
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	62 e0       	ldi	r22, 0x02	; 2
    190a:	41 e0       	ldi	r20, 0x01	; 1
    190c:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN3,DIO_u8PIN_HIGH);
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	63 e0       	ldi	r22, 0x03	; 3
    1914:	41 e0       	ldi	r20, 0x01	; 1
    1916:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
	/*Define Columns pins as High*/
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN4,DIO_u8PIN_HIGH);
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	64 e0       	ldi	r22, 0x04	; 4
    191e:	41 e0       	ldi	r20, 0x01	; 1
    1920:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN5,DIO_u8PIN_HIGH);
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	65 e0       	ldi	r22, 0x05	; 5
    1928:	41 e0       	ldi	r20, 0x01	; 1
    192a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN6,DIO_u8PIN_HIGH);
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	66 e0       	ldi	r22, 0x06	; 6
    1932:	41 e0       	ldi	r20, 0x01	; 1
    1934:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTA,DIO_u8PIN7,DIO_u8PIN_HIGH);
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	67 e0       	ldi	r22, 0x07	; 7
    193c:	41 e0       	ldi	r20, 0x01	; 1
    193e:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
}
    1942:	cf 91       	pop	r28
    1944:	df 91       	pop	r29
    1946:	08 95       	ret

00001948 <KPD_u8GetPressedKey>:



char KPD_u8GetPressedKey(void)
{
    1948:	df 93       	push	r29
    194a:	cf 93       	push	r28
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	61 97       	sbiw	r28, 0x11	; 17
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
	char Local_u8PressedKey=NOT_PRESSED;
    195c:	19 8a       	std	Y+17, r1	; 0x11
	static u8 Local_u8KPDColumnArr[4]={4,5,6,7};
	static u8 Local_u8KPDRowArr[4]={0,1,2,3};

	//DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_OUTPUT);

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<4;Local_u8ColumnIndex++)
    195e:	18 8a       	std	Y+16, r1	; 0x10
    1960:	d7 c0       	rjmp	.+430    	; 0x1b10 <KPD_u8GetPressedKey+0x1c8>
	{
		/*De-Activate current column*/
		DIO_u8SetPinValue(DIO_u8PORTA,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_LOW);
    1962:	88 89       	ldd	r24, Y+16	; 0x10
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	fc 01       	movw	r30, r24
    196a:	e8 51       	subi	r30, 0x18	; 24
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	90 81       	ld	r25, Z
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	69 2f       	mov	r22, r25
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>

		/*Check rows*/
		for(Local_u8RowIndex=0;Local_u8RowIndex<4;Local_u8RowIndex++)
    197a:	1f 86       	std	Y+15, r1	; 0x0f
    197c:	b6 c0       	rjmp	.+364    	; 0x1aea <KPD_u8GetPressedKey+0x1a2>
		{
			/*Read current row*/
			//Local_u8Pinstate= DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex]);
			/*check if switch is pressed*/
			if(DIO_u8GetPinValue(DIO_u8PORTA,Local_u8KPDRowArr[Local_u8RowIndex]) == DIO_u8PIN_LOW)
    197e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1980:	88 2f       	mov	r24, r24
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	fc 01       	movw	r30, r24
    1986:	ec 51       	subi	r30, 0x1C	; 28
    1988:	ff 4f       	sbci	r31, 0xFF	; 255
    198a:	90 81       	ld	r25, Z
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	69 2f       	mov	r22, r25
    1990:	0e 94 29 09 	call	0x1252	; 0x1252 <DIO_u8GetPinValue>
    1994:	88 23       	and	r24, r24
    1996:	09 f0       	breq	.+2      	; 0x199a <KPD_u8GetPressedKey+0x52>
    1998:	a5 c0       	rjmp	.+330    	; 0x1ae4 <KPD_u8GetPressedKey+0x19c>
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	a8 e4       	ldi	r26, 0x48	; 72
    19a0:	b2 e4       	ldi	r27, 0x42	; 66
    19a2:	8b 87       	std	Y+11, r24	; 0x0b
    19a4:	9c 87       	std	Y+12, r25	; 0x0c
    19a6:	ad 87       	std	Y+13, r26	; 0x0d
    19a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	4a ef       	ldi	r20, 0xFA	; 250
    19b8:	54 e4       	ldi	r21, 0x44	; 68
    19ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19be:	dc 01       	movw	r26, r24
    19c0:	cb 01       	movw	r24, r22
    19c2:	8f 83       	std	Y+7, r24	; 0x07
    19c4:	98 87       	std	Y+8, r25	; 0x08
    19c6:	a9 87       	std	Y+9, r26	; 0x09
    19c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ca:	6f 81       	ldd	r22, Y+7	; 0x07
    19cc:	78 85       	ldd	r23, Y+8	; 0x08
    19ce:	89 85       	ldd	r24, Y+9	; 0x09
    19d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e8       	ldi	r20, 0x80	; 128
    19d8:	5f e3       	ldi	r21, 0x3F	; 63
    19da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19de:	88 23       	and	r24, r24
    19e0:	2c f4       	brge	.+10     	; 0x19ec <KPD_u8GetPressedKey+0xa4>
		__ticks = 1;
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	9e 83       	std	Y+6, r25	; 0x06
    19e8:	8d 83       	std	Y+5, r24	; 0x05
    19ea:	3f c0       	rjmp	.+126    	; 0x1a6a <KPD_u8GetPressedKey+0x122>
	else if (__tmp > 65535)
    19ec:	6f 81       	ldd	r22, Y+7	; 0x07
    19ee:	78 85       	ldd	r23, Y+8	; 0x08
    19f0:	89 85       	ldd	r24, Y+9	; 0x09
    19f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	3f ef       	ldi	r19, 0xFF	; 255
    19f8:	4f e7       	ldi	r20, 0x7F	; 127
    19fa:	57 e4       	ldi	r21, 0x47	; 71
    19fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a00:	18 16       	cp	r1, r24
    1a02:	4c f5       	brge	.+82     	; 0x1a56 <KPD_u8GetPressedKey+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	40 e2       	ldi	r20, 0x20	; 32
    1a12:	51 e4       	ldi	r21, 0x41	; 65
    1a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	bc 01       	movw	r22, r24
    1a1e:	cd 01       	movw	r24, r26
    1a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	9e 83       	std	Y+6, r25	; 0x06
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
    1a2c:	0f c0       	rjmp	.+30     	; 0x1a4c <KPD_u8GetPressedKey+0x104>
    1a2e:	88 ec       	ldi	r24, 0xC8	; 200
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	9c 83       	std	Y+4, r25	; 0x04
    1a34:	8b 83       	std	Y+3, r24	; 0x03
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	9c 81       	ldd	r25, Y+4	; 0x04
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <KPD_u8GetPressedKey+0xf2>
    1a3e:	9c 83       	std	Y+4, r25	; 0x04
    1a40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a42:	8d 81       	ldd	r24, Y+5	; 0x05
    1a44:	9e 81       	ldd	r25, Y+6	; 0x06
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	9e 83       	std	Y+6, r25	; 0x06
    1a4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	69 f7       	brne	.-38     	; 0x1a2e <KPD_u8GetPressedKey+0xe6>
    1a54:	14 c0       	rjmp	.+40     	; 0x1a7e <KPD_u8GetPressedKey+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a56:	6f 81       	ldd	r22, Y+7	; 0x07
    1a58:	78 85       	ldd	r23, Y+8	; 0x08
    1a5a:	89 85       	ldd	r24, Y+9	; 0x09
    1a5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	9e 83       	std	Y+6, r25	; 0x06
    1a68:	8d 83       	std	Y+5, r24	; 0x05
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6e:	9a 83       	std	Y+2, r25	; 0x02
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	89 81       	ldd	r24, Y+1	; 0x01
    1a74:	9a 81       	ldd	r25, Y+2	; 0x02
    1a76:	01 97       	sbiw	r24, 0x01	; 1
    1a78:	f1 f7       	brne	.-4      	; 0x1a76 <KPD_u8GetPressedKey+0x12e>
    1a7a:	9a 83       	std	Y+2, r25	; 0x02
    1a7c:	89 83       	std	Y+1, r24	; 0x01
			{
				//DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_HIGH);

				_delay_ms(50);

				Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    1a7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a80:	48 2f       	mov	r20, r24
    1a82:	50 e0       	ldi	r21, 0x00	; 0
    1a84:	88 89       	ldd	r24, Y+16	; 0x10
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	ca 01       	movw	r24, r20
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	88 0f       	add	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	82 0f       	add	r24, r18
    1a96:	93 1f       	adc	r25, r19
    1a98:	fc 01       	movw	r30, r24
    1a9a:	e4 51       	subi	r30, 0x14	; 20
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	80 81       	ld	r24, Z
    1aa0:	89 8b       	std	Y+17, r24	; 0x11
    1aa2:	12 c0       	rjmp	.+36     	; 0x1ac8 <KPD_u8GetPressedKey+0x180>

				/*Busy waiting until button is released*/
				while(DIO_u8GetPinValue(DIO_u8PORTA,Local_u8KPDRowArr[Local_u8RowIndex])==DIO_u8PIN_LOW)
				{
					Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    1aa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa6:	48 2f       	mov	r20, r24
    1aa8:	50 e0       	ldi	r21, 0x00	; 0
    1aaa:	88 89       	ldd	r24, Y+16	; 0x10
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	ca 01       	movw	r24, r20
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	82 0f       	add	r24, r18
    1abc:	93 1f       	adc	r25, r19
    1abe:	fc 01       	movw	r30, r24
    1ac0:	e4 51       	subi	r30, 0x14	; 20
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	80 81       	ld	r24, Z
    1ac6:	89 8b       	std	Y+17, r24	; 0x11
				_delay_ms(50);

				Local_u8PressedKey= Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];

				/*Busy waiting until button is released*/
				while(DIO_u8GetPinValue(DIO_u8PORTA,Local_u8KPDRowArr[Local_u8RowIndex])==DIO_u8PIN_LOW)
    1ac8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aca:	88 2f       	mov	r24, r24
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	fc 01       	movw	r30, r24
    1ad0:	ec 51       	subi	r30, 0x1C	; 28
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	90 81       	ld	r25, Z
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	69 2f       	mov	r22, r25
    1ada:	0e 94 29 09 	call	0x1252	; 0x1252 <DIO_u8GetPinValue>
    1ade:	88 23       	and	r24, r24
    1ae0:	09 f3       	breq	.-62     	; 0x1aa4 <KPD_u8GetPressedKey+0x15c>
    1ae2:	07 c0       	rjmp	.+14     	; 0x1af2 <KPD_u8GetPressedKey+0x1aa>
	{
		/*De-Activate current column*/
		DIO_u8SetPinValue(DIO_u8PORTA,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_LOW);

		/*Check rows*/
		for(Local_u8RowIndex=0;Local_u8RowIndex<4;Local_u8RowIndex++)
    1ae4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae6:	8f 5f       	subi	r24, 0xFF	; 255
    1ae8:	8f 87       	std	Y+15, r24	; 0x0f
    1aea:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aec:	84 30       	cpi	r24, 0x04	; 4
    1aee:	08 f4       	brcc	.+2      	; 0x1af2 <KPD_u8GetPressedKey+0x1aa>
    1af0:	46 cf       	rjmp	.-372    	; 0x197e <KPD_u8GetPressedKey+0x36>
				break;
			}
		}

		/*Deactivate the current column*/
		DIO_u8SetPinValue(DIO_u8PORTA,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_HIGH);
    1af2:	88 89       	ldd	r24, Y+16	; 0x10
    1af4:	88 2f       	mov	r24, r24
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	fc 01       	movw	r30, r24
    1afa:	e8 51       	subi	r30, 0x18	; 24
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	90 81       	ld	r25, Z
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	69 2f       	mov	r22, r25
    1b04:	41 e0       	ldi	r20, 0x01	; 1
    1b06:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <DIO_u8SetPinValue>
	static u8 Local_u8KPDColumnArr[4]={4,5,6,7};
	static u8 Local_u8KPDRowArr[4]={0,1,2,3};

	//DIO_u8SetPinDirection(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_OUTPUT);

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<4;Local_u8ColumnIndex++)
    1b0a:	88 89       	ldd	r24, Y+16	; 0x10
    1b0c:	8f 5f       	subi	r24, 0xFF	; 255
    1b0e:	88 8b       	std	Y+16, r24	; 0x10
    1b10:	88 89       	ldd	r24, Y+16	; 0x10
    1b12:	84 30       	cpi	r24, 0x04	; 4
    1b14:	08 f4       	brcc	.+2      	; 0x1b18 <KPD_u8GetPressedKey+0x1d0>
    1b16:	25 cf       	rjmp	.-438    	; 0x1962 <KPD_u8GetPressedKey+0x1a>

		/*Deactivate the current column*/
		DIO_u8SetPinValue(DIO_u8PORTA,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_HIGH);
	}

	return Local_u8PressedKey;
    1b18:	89 89       	ldd	r24, Y+17	; 0x11
}
    1b1a:	61 96       	adiw	r28, 0x11	; 17
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <MC1_Init>:
u8 Send_Password_flag=0;
u8 Close_door_flag=0;
u8 Display_status_flag=0;
/*Function to start initialization for specific peripherals*/
void MC1_Init(void)
{
    1b2c:	df 93       	push	r29
    1b2e:	cf 93       	push	r28
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidInit();
    1b34:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <CLCD_voidInit>
	KEYPAD_Init();
    1b38:	0e 94 4d 0c 	call	0x189a	; 0x189a <KEYPAD_Init>
	USART_voidInit();
    1b3c:	0e 94 b4 05 	call	0xb68	; 0xb68 <USART_voidInit>
	USART_voidPinInit();
    1b40:	0e 94 a3 05 	call	0xb46	; 0xb46 <USART_voidPinInit>

}
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <Take_Password>:
/*Function used to take password from used using keypad and display entered password on LCD*/
void Take_Password(void)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	6e 97       	sbiw	r28, 0x1e	; 30
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
	u8 Local_pass='\0';
    1b5e:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 Counter=0;
    1b60:	1d 8e       	std	Y+29, r1	; 0x1d
	CLCD_voidGoToXY(0,0);
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <CLCD_voidGoToXY>
	CLCD_voidSendString("Enter Password");
    1b6a:	80 e6       	ldi	r24, 0x60	; 96
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	0e 94 8d 0b 	call	0x171a	; 0x171a <CLCD_voidSendString>
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	aa ef       	ldi	r26, 0xFA	; 250
    1b78:	b3 e4       	ldi	r27, 0x43	; 67
    1b7a:	89 8f       	std	Y+25, r24	; 0x19
    1b7c:	9a 8f       	std	Y+26, r25	; 0x1a
    1b7e:	ab 8f       	std	Y+27, r26	; 0x1b
    1b80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b82:	69 8d       	ldd	r22, Y+25	; 0x19
    1b84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	4a ef       	ldi	r20, 0xFA	; 250
    1b90:	54 e4       	ldi	r21, 0x44	; 68
    1b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	8d 8b       	std	Y+21, r24	; 0x15
    1b9c:	9e 8b       	std	Y+22, r25	; 0x16
    1b9e:	af 8b       	std	Y+23, r26	; 0x17
    1ba0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ba2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba8:	98 8d       	ldd	r25, Y+24	; 0x18
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e8       	ldi	r20, 0x80	; 128
    1bb0:	5f e3       	ldi	r21, 0x3F	; 63
    1bb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb6:	88 23       	and	r24, r24
    1bb8:	2c f4       	brge	.+10     	; 0x1bc4 <Take_Password+0x7a>
		__ticks = 1;
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	9c 8b       	std	Y+20, r25	; 0x14
    1bc0:	8b 8b       	std	Y+19, r24	; 0x13
    1bc2:	3f c0       	rjmp	.+126    	; 0x1c42 <Take_Password+0xf8>
	else if (__tmp > 65535)
    1bc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1bca:	98 8d       	ldd	r25, Y+24	; 0x18
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	3f ef       	ldi	r19, 0xFF	; 255
    1bd0:	4f e7       	ldi	r20, 0x7F	; 127
    1bd2:	57 e4       	ldi	r21, 0x47	; 71
    1bd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bd8:	18 16       	cp	r1, r24
    1bda:	4c f5       	brge	.+82     	; 0x1c2e <Take_Password+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bdc:	69 8d       	ldd	r22, Y+25	; 0x19
    1bde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1be0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1be2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e2       	ldi	r20, 0x20	; 32
    1bea:	51 e4       	ldi	r21, 0x41	; 65
    1bec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	bc 01       	movw	r22, r24
    1bf6:	cd 01       	movw	r24, r26
    1bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	9c 8b       	std	Y+20, r25	; 0x14
    1c02:	8b 8b       	std	Y+19, r24	; 0x13
    1c04:	0f c0       	rjmp	.+30     	; 0x1c24 <Take_Password+0xda>
    1c06:	88 ec       	ldi	r24, 0xC8	; 200
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	9a 8b       	std	Y+18, r25	; 0x12
    1c0c:	89 8b       	std	Y+17, r24	; 0x11
    1c0e:	89 89       	ldd	r24, Y+17	; 0x11
    1c10:	9a 89       	ldd	r25, Y+18	; 0x12
    1c12:	01 97       	sbiw	r24, 0x01	; 1
    1c14:	f1 f7       	brne	.-4      	; 0x1c12 <Take_Password+0xc8>
    1c16:	9a 8b       	std	Y+18, r25	; 0x12
    1c18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	9c 8b       	std	Y+20, r25	; 0x14
    1c22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c24:	8b 89       	ldd	r24, Y+19	; 0x13
    1c26:	9c 89       	ldd	r25, Y+20	; 0x14
    1c28:	00 97       	sbiw	r24, 0x00	; 0
    1c2a:	69 f7       	brne	.-38     	; 0x1c06 <Take_Password+0xbc>
    1c2c:	14 c0       	rjmp	.+40     	; 0x1c56 <Take_Password+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c30:	7e 89       	ldd	r23, Y+22	; 0x16
    1c32:	8f 89       	ldd	r24, Y+23	; 0x17
    1c34:	98 8d       	ldd	r25, Y+24	; 0x18
    1c36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	9c 8b       	std	Y+20, r25	; 0x14
    1c40:	8b 8b       	std	Y+19, r24	; 0x13
    1c42:	8b 89       	ldd	r24, Y+19	; 0x13
    1c44:	9c 89       	ldd	r25, Y+20	; 0x14
    1c46:	98 8b       	std	Y+16, r25	; 0x10
    1c48:	8f 87       	std	Y+15, r24	; 0x0f
    1c4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c4c:	98 89       	ldd	r25, Y+16	; 0x10
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	f1 f7       	brne	.-4      	; 0x1c4e <Take_Password+0x104>
    1c52:	98 8b       	std	Y+16, r25	; 0x10
    1c54:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	CLCD_voidGoToXY(1,0);
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <CLCD_voidGoToXY>
	CLCD_voidSendString("To Open Door");
    1c5e:	8f e6       	ldi	r24, 0x6F	; 111
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	0e 94 8d 0b 	call	0x171a	; 0x171a <CLCD_voidSendString>
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	aa ef       	ldi	r26, 0xFA	; 250
    1c6c:	b3 e4       	ldi	r27, 0x43	; 67
    1c6e:	8b 87       	std	Y+11, r24	; 0x0b
    1c70:	9c 87       	std	Y+12, r25	; 0x0c
    1c72:	ad 87       	std	Y+13, r26	; 0x0d
    1c74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c76:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c78:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a ef       	ldi	r20, 0xFA	; 250
    1c84:	54 e4       	ldi	r21, 0x44	; 68
    1c86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	8f 83       	std	Y+7, r24	; 0x07
    1c90:	98 87       	std	Y+8, r25	; 0x08
    1c92:	a9 87       	std	Y+9, r26	; 0x09
    1c94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c96:	6f 81       	ldd	r22, Y+7	; 0x07
    1c98:	78 85       	ldd	r23, Y+8	; 0x08
    1c9a:	89 85       	ldd	r24, Y+9	; 0x09
    1c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e8       	ldi	r20, 0x80	; 128
    1ca4:	5f e3       	ldi	r21, 0x3F	; 63
    1ca6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1caa:	88 23       	and	r24, r24
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <Take_Password+0x16e>
		__ticks = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	9e 83       	std	Y+6, r25	; 0x06
    1cb4:	8d 83       	std	Y+5, r24	; 0x05
    1cb6:	3f c0       	rjmp	.+126    	; 0x1d36 <Take_Password+0x1ec>
	else if (__tmp > 65535)
    1cb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cba:	78 85       	ldd	r23, Y+8	; 0x08
    1cbc:	89 85       	ldd	r24, Y+9	; 0x09
    1cbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	3f ef       	ldi	r19, 0xFF	; 255
    1cc4:	4f e7       	ldi	r20, 0x7F	; 127
    1cc6:	57 e4       	ldi	r21, 0x47	; 71
    1cc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	4c f5       	brge	.+82     	; 0x1d22 <Take_Password+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd8:	20 e0       	ldi	r18, 0x00	; 0
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	40 e2       	ldi	r20, 0x20	; 32
    1cde:	51 e4       	ldi	r21, 0x41	; 65
    1ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	bc 01       	movw	r22, r24
    1cea:	cd 01       	movw	r24, r26
    1cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	9e 83       	std	Y+6, r25	; 0x06
    1cf6:	8d 83       	std	Y+5, r24	; 0x05
    1cf8:	0f c0       	rjmp	.+30     	; 0x1d18 <Take_Password+0x1ce>
    1cfa:	88 ec       	ldi	r24, 0xC8	; 200
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9c 83       	std	Y+4, r25	; 0x04
    1d00:	8b 83       	std	Y+3, r24	; 0x03
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <Take_Password+0x1bc>
    1d0a:	9c 83       	std	Y+4, r25	; 0x04
    1d0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d10:	9e 81       	ldd	r25, Y+6	; 0x06
    1d12:	01 97       	sbiw	r24, 0x01	; 1
    1d14:	9e 83       	std	Y+6, r25	; 0x06
    1d16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d18:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	69 f7       	brne	.-38     	; 0x1cfa <Take_Password+0x1b0>
    1d20:	14 c0       	rjmp	.+40     	; 0x1d4a <Take_Password+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d22:	6f 81       	ldd	r22, Y+7	; 0x07
    1d24:	78 85       	ldd	r23, Y+8	; 0x08
    1d26:	89 85       	ldd	r24, Y+9	; 0x09
    1d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	9e 83       	std	Y+6, r25	; 0x06
    1d34:	8d 83       	std	Y+5, r24	; 0x05
    1d36:	8d 81       	ldd	r24, Y+5	; 0x05
    1d38:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3a:	9a 83       	std	Y+2, r25	; 0x02
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	9a 81       	ldd	r25, Y+2	; 0x02
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	f1 f7       	brne	.-4      	; 0x1d42 <Take_Password+0x1f8>
    1d46:	9a 83       	std	Y+2, r25	; 0x02
    1d48:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	CLCD_voidClearDisplay();
    1d4a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <CLCD_voidClearDisplay>
	CLCD_voidSendString("Pass:");
    1d4e:	8c e7       	ldi	r24, 0x7C	; 124
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	0e 94 8d 0b 	call	0x171a	; 0x171a <CLCD_voidSendString>
    1d56:	18 c0       	rjmp	.+48     	; 0x1d88 <Take_Password+0x23e>
	while(Counter<=3)
	{
		Local_pass=KPD_u8GetPressedKey();
    1d58:	0e 94 a4 0c 	call	0x1948	; 0x1948 <KPD_u8GetPressedKey>
    1d5c:	8e 8f       	std	Y+30, r24	; 0x1e
    1d5e:	03 c0       	rjmp	.+6      	; 0x1d66 <Take_Password+0x21c>
		while(Local_pass == '\0')
			{
				Local_pass=KPD_u8GetPressedKey();
    1d60:	0e 94 a4 0c 	call	0x1948	; 0x1948 <KPD_u8GetPressedKey>
    1d64:	8e 8f       	std	Y+30, r24	; 0x1e
	CLCD_voidClearDisplay();
	CLCD_voidSendString("Pass:");
	while(Counter<=3)
	{
		Local_pass=KPD_u8GetPressedKey();
		while(Local_pass == '\0')
    1d66:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d68:	88 23       	and	r24, r24
    1d6a:	d1 f3       	breq	.-12     	; 0x1d60 <Take_Password+0x216>
			{
				Local_pass=KPD_u8GetPressedKey();
			}
		CLCD_voidSendData(Local_pass);
    1d6c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d6e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <CLCD_voidSendData>
		Password[Counter]=Local_pass;
    1d72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d74:	88 2f       	mov	r24, r24
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	fc 01       	movw	r30, r24
    1d7a:	e4 50       	subi	r30, 0x04	; 4
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d80:	80 83       	st	Z, r24
		Counter++;
    1d82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d84:	8f 5f       	subi	r24, 0xFF	; 255
    1d86:	8d 8f       	std	Y+29, r24	; 0x1d
	CLCD_voidGoToXY(1,0);
	CLCD_voidSendString("To Open Door");
	_delay_ms(500);
	CLCD_voidClearDisplay();
	CLCD_voidSendString("Pass:");
	while(Counter<=3)
    1d88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d8a:	84 30       	cpi	r24, 0x04	; 4
    1d8c:	28 f3       	brcs	.-54     	; 0x1d58 <Take_Password+0x20e>
		CLCD_voidSendData(Local_pass);
		Password[Counter]=Local_pass;
		Counter++;
	}
	/*Flag to determine that the process of taking password is done*/
	Password_flag=1;
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	80 93 00 01 	sts	0x0100, r24
}
    1d94:	6e 96       	adiw	r28, 0x1e	; 30
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	de bf       	out	0x3e, r29	; 62
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	cd bf       	out	0x3d, r28	; 61
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	08 95       	ret

00001da6 <Send_Password>:
/*Function used to Send password to Micro-controller 2 using UART communication protocol*/
void Send_Password(void)
{
    1da6:	df 93       	push	r29
    1da8:	cf 93       	push	r28
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	2f 97       	sbiw	r28, 0x0f	; 15
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	f8 94       	cli
    1db4:	de bf       	out	0x3e, r29	; 62
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	cd bf       	out	0x3d, r28	; 61
	u8 USART_Counter=0;
    1dba:	1f 86       	std	Y+15, r1	; 0x0f
	for(USART_Counter=0;USART_Counter<=3;USART_Counter++)
    1dbc:	1f 86       	std	Y+15, r1	; 0x0f
    1dbe:	7e c0       	rjmp	.+252    	; 0x1ebc <Send_Password+0x116>
	{
		USART_voidSend(Password[USART_Counter]);
    1dc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc2:	88 2f       	mov	r24, r24
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	e4 50       	subi	r30, 0x04	; 4
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	80 81       	ld	r24, Z
    1dce:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <USART_voidSend>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a0 e2       	ldi	r26, 0x20	; 32
    1dd8:	b1 e4       	ldi	r27, 0x41	; 65
    1dda:	8b 87       	std	Y+11, r24	; 0x0b
    1ddc:	9c 87       	std	Y+12, r25	; 0x0c
    1dde:	ad 87       	std	Y+13, r26	; 0x0d
    1de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	4a ef       	ldi	r20, 0xFA	; 250
    1df0:	54 e4       	ldi	r21, 0x44	; 68
    1df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	8f 83       	std	Y+7, r24	; 0x07
    1dfc:	98 87       	std	Y+8, r25	; 0x08
    1dfe:	a9 87       	std	Y+9, r26	; 0x09
    1e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e02:	6f 81       	ldd	r22, Y+7	; 0x07
    1e04:	78 85       	ldd	r23, Y+8	; 0x08
    1e06:	89 85       	ldd	r24, Y+9	; 0x09
    1e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e16:	88 23       	and	r24, r24
    1e18:	2c f4       	brge	.+10     	; 0x1e24 <Send_Password+0x7e>
		__ticks = 1;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
    1e22:	3f c0       	rjmp	.+126    	; 0x1ea2 <Send_Password+0xfc>
	else if (__tmp > 65535)
    1e24:	6f 81       	ldd	r22, Y+7	; 0x07
    1e26:	78 85       	ldd	r23, Y+8	; 0x08
    1e28:	89 85       	ldd	r24, Y+9	; 0x09
    1e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	3f ef       	ldi	r19, 0xFF	; 255
    1e30:	4f e7       	ldi	r20, 0x7F	; 127
    1e32:	57 e4       	ldi	r21, 0x47	; 71
    1e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e38:	18 16       	cp	r1, r24
    1e3a:	4c f5       	brge	.+82     	; 0x1e8e <Send_Password+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e2       	ldi	r20, 0x20	; 32
    1e4a:	51 e4       	ldi	r21, 0x41	; 65
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	bc 01       	movw	r22, r24
    1e56:	cd 01       	movw	r24, r26
    1e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	9e 83       	std	Y+6, r25	; 0x06
    1e62:	8d 83       	std	Y+5, r24	; 0x05
    1e64:	0f c0       	rjmp	.+30     	; 0x1e84 <Send_Password+0xde>
    1e66:	88 ec       	ldi	r24, 0xC8	; 200
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	9c 83       	std	Y+4, r25	; 0x04
    1e6c:	8b 83       	std	Y+3, r24	; 0x03
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	9c 81       	ldd	r25, Y+4	; 0x04
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <Send_Password+0xcc>
    1e76:	9c 83       	std	Y+4, r25	; 0x04
    1e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	9e 83       	std	Y+6, r25	; 0x06
    1e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e84:	8d 81       	ldd	r24, Y+5	; 0x05
    1e86:	9e 81       	ldd	r25, Y+6	; 0x06
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	69 f7       	brne	.-38     	; 0x1e66 <Send_Password+0xc0>
    1e8c:	14 c0       	rjmp	.+40     	; 0x1eb6 <Send_Password+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e90:	78 85       	ldd	r23, Y+8	; 0x08
    1e92:	89 85       	ldd	r24, Y+9	; 0x09
    1e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
    1ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea6:	9a 83       	std	Y+2, r25	; 0x02
    1ea8:	89 83       	std	Y+1, r24	; 0x01
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	9a 81       	ldd	r25, Y+2	; 0x02
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <Send_Password+0x108>
    1eb2:	9a 83       	std	Y+2, r25	; 0x02
    1eb4:	89 83       	std	Y+1, r24	; 0x01
}
/*Function used to Send password to Micro-controller 2 using UART communication protocol*/
void Send_Password(void)
{
	u8 USART_Counter=0;
	for(USART_Counter=0;USART_Counter<=3;USART_Counter++)
    1eb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eb8:	8f 5f       	subi	r24, 0xFF	; 255
    1eba:	8f 87       	std	Y+15, r24	; 0x0f
    1ebc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ebe:	84 30       	cpi	r24, 0x04	; 4
    1ec0:	08 f4       	brcc	.+2      	; 0x1ec4 <Send_Password+0x11e>
    1ec2:	7e cf       	rjmp	.-260    	; 0x1dc0 <Send_Password+0x1a>
	{
		USART_voidSend(Password[USART_Counter]);
		_delay_ms(10);
	}
	/*flag to determine that the process of transmitting is finished*/
	Send_Password_flag=1;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	80 93 01 01 	sts	0x0101, r24
}
    1eca:	2f 96       	adiw	r28, 0x0f	; 15
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <Close_Door>:
/*Function used to Close the door after being opened by sending specific Number to MICRO-controller2*/
void Close_Door(void)
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	cd b7       	in	r28, 0x3d	; 61
    1ee2:	de b7       	in	r29, 0x3e	; 62
    1ee4:	6d 97       	sbiw	r28, 0x1d	; 29
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
	u8 Local_command;
	CLCD_voidClearDisplay();
    1ef0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <CLCD_voidClearDisplay>
	CLCD_voidGoToXY(0,0);
    1ef4:	80 e0       	ldi	r24, 0x00	; 0
    1ef6:	60 e0       	ldi	r22, 0x00	; 0
    1ef8:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <CLCD_voidGoToXY>
	CLCD_voidSendString("To Close Door");
    1efc:	82 e8       	ldi	r24, 0x82	; 130
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	0e 94 8d 0b 	call	0x171a	; 0x171a <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	60 e0       	ldi	r22, 0x00	; 0
    1f08:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <CLCD_voidGoToXY>
	CLCD_voidSendString("Press '5' ");
    1f0c:	80 e9       	ldi	r24, 0x90	; 144
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	0e 94 8d 0b 	call	0x171a	; 0x171a <CLCD_voidSendString>
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	aa ef       	ldi	r26, 0xFA	; 250
    1f1a:	b3 e4       	ldi	r27, 0x43	; 67
    1f1c:	89 8f       	std	Y+25, r24	; 0x19
    1f1e:	9a 8f       	std	Y+26, r25	; 0x1a
    1f20:	ab 8f       	std	Y+27, r26	; 0x1b
    1f22:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f24:	69 8d       	ldd	r22, Y+25	; 0x19
    1f26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	4a ef       	ldi	r20, 0xFA	; 250
    1f32:	54 e4       	ldi	r21, 0x44	; 68
    1f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	8d 8b       	std	Y+21, r24	; 0x15
    1f3e:	9e 8b       	std	Y+22, r25	; 0x16
    1f40:	af 8b       	std	Y+23, r26	; 0x17
    1f42:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f44:	6d 89       	ldd	r22, Y+21	; 0x15
    1f46:	7e 89       	ldd	r23, Y+22	; 0x16
    1f48:	8f 89       	ldd	r24, Y+23	; 0x17
    1f4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e8       	ldi	r20, 0x80	; 128
    1f52:	5f e3       	ldi	r21, 0x3F	; 63
    1f54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f58:	88 23       	and	r24, r24
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <Close_Door+0x8a>
		__ticks = 1;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	9c 8b       	std	Y+20, r25	; 0x14
    1f62:	8b 8b       	std	Y+19, r24	; 0x13
    1f64:	3f c0       	rjmp	.+126    	; 0x1fe4 <Close_Door+0x108>
	else if (__tmp > 65535)
    1f66:	6d 89       	ldd	r22, Y+21	; 0x15
    1f68:	7e 89       	ldd	r23, Y+22	; 0x16
    1f6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	3f ef       	ldi	r19, 0xFF	; 255
    1f72:	4f e7       	ldi	r20, 0x7F	; 127
    1f74:	57 e4       	ldi	r21, 0x47	; 71
    1f76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f7a:	18 16       	cp	r1, r24
    1f7c:	4c f5       	brge	.+82     	; 0x1fd0 <Close_Door+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7e:	69 8d       	ldd	r22, Y+25	; 0x19
    1f80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e2       	ldi	r20, 0x20	; 32
    1f8c:	51 e4       	ldi	r21, 0x41	; 65
    1f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	bc 01       	movw	r22, r24
    1f98:	cd 01       	movw	r24, r26
    1f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	9c 8b       	std	Y+20, r25	; 0x14
    1fa4:	8b 8b       	std	Y+19, r24	; 0x13
    1fa6:	0f c0       	rjmp	.+30     	; 0x1fc6 <Close_Door+0xea>
    1fa8:	88 ec       	ldi	r24, 0xC8	; 200
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9a 8b       	std	Y+18, r25	; 0x12
    1fae:	89 8b       	std	Y+17, r24	; 0x11
    1fb0:	89 89       	ldd	r24, Y+17	; 0x11
    1fb2:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <Close_Door+0xd8>
    1fb8:	9a 8b       	std	Y+18, r25	; 0x12
    1fba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fbe:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	9c 8b       	std	Y+20, r25	; 0x14
    1fc4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	69 f7       	brne	.-38     	; 0x1fa8 <Close_Door+0xcc>
    1fce:	14 c0       	rjmp	.+40     	; 0x1ff8 <Close_Door+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9c 8b       	std	Y+20, r25	; 0x14
    1fe2:	8b 8b       	std	Y+19, r24	; 0x13
    1fe4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe8:	98 8b       	std	Y+16, r25	; 0x10
    1fea:	8f 87       	std	Y+15, r24	; 0x0f
    1fec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fee:	98 89       	ldd	r25, Y+16	; 0x10
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <Close_Door+0x114>
    1ff4:	98 8b       	std	Y+16, r25	; 0x10
    1ff6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);

	Local_command=KPD_u8GetPressedKey();
    1ff8:	0e 94 a4 0c 	call	0x1948	; 0x1948 <KPD_u8GetPressedKey>
    1ffc:	8d 8f       	std	Y+29, r24	; 0x1d
    1ffe:	03 c0       	rjmp	.+6      	; 0x2006 <Close_Door+0x12a>
	while(Local_command == '\0')
		{
			Local_command=KPD_u8GetPressedKey();
    2000:	0e 94 a4 0c 	call	0x1948	; 0x1948 <KPD_u8GetPressedKey>
    2004:	8d 8f       	std	Y+29, r24	; 0x1d
	CLCD_voidGoToXY(1,0);
	CLCD_voidSendString("Press '5' ");
	_delay_ms(500);

	Local_command=KPD_u8GetPressedKey();
	while(Local_command == '\0')
    2006:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2008:	88 23       	and	r24, r24
    200a:	d1 f3       	breq	.-12     	; 0x2000 <Close_Door+0x124>
		{
			Local_command=KPD_u8GetPressedKey();
		}
	if(Local_command =='5')
    200c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    200e:	85 33       	cpi	r24, 0x35	; 53
    2010:	39 f4       	brne	.+14     	; 0x2020 <Close_Door+0x144>
	{
		USART_voidSend('5');
    2012:	85 e3       	ldi	r24, 0x35	; 53
    2014:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <USART_voidSend>
		/*flag =1 to indicate that process of sending the number is done*/
		Close_door_flag=1;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	80 93 02 01 	sts	0x0102, r24
    201e:	7e c0       	rjmp	.+252    	; 0x211c <Close_Door+0x240>
	}
	else if(Local_command != '5')
    2020:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2022:	85 33       	cpi	r24, 0x35	; 53
    2024:	09 f4       	brne	.+2      	; 0x2028 <Close_Door+0x14c>
    2026:	7a c0       	rjmp	.+244    	; 0x211c <Close_Door+0x240>
	{
		CLCD_voidClearDisplay();
    2028:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <CLCD_voidClearDisplay>
		CLCD_voidSendString("Unknown Command");
    202c:	8b e9       	ldi	r24, 0x9B	; 155
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	0e 94 8d 0b 	call	0x171a	; 0x171a <CLCD_voidSendString>
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	aa ef       	ldi	r26, 0xFA	; 250
    203a:	b3 e4       	ldi	r27, 0x43	; 67
    203c:	8b 87       	std	Y+11, r24	; 0x0b
    203e:	9c 87       	std	Y+12, r25	; 0x0c
    2040:	ad 87       	std	Y+13, r26	; 0x0d
    2042:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2044:	6b 85       	ldd	r22, Y+11	; 0x0b
    2046:	7c 85       	ldd	r23, Y+12	; 0x0c
    2048:	8d 85       	ldd	r24, Y+13	; 0x0d
    204a:	9e 85       	ldd	r25, Y+14	; 0x0e
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	4a ef       	ldi	r20, 0xFA	; 250
    2052:	54 e4       	ldi	r21, 0x44	; 68
    2054:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	8f 83       	std	Y+7, r24	; 0x07
    205e:	98 87       	std	Y+8, r25	; 0x08
    2060:	a9 87       	std	Y+9, r26	; 0x09
    2062:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2064:	6f 81       	ldd	r22, Y+7	; 0x07
    2066:	78 85       	ldd	r23, Y+8	; 0x08
    2068:	89 85       	ldd	r24, Y+9	; 0x09
    206a:	9a 85       	ldd	r25, Y+10	; 0x0a
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	40 e8       	ldi	r20, 0x80	; 128
    2072:	5f e3       	ldi	r21, 0x3F	; 63
    2074:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2078:	88 23       	and	r24, r24
    207a:	2c f4       	brge	.+10     	; 0x2086 <Close_Door+0x1aa>
		__ticks = 1;
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	9e 83       	std	Y+6, r25	; 0x06
    2082:	8d 83       	std	Y+5, r24	; 0x05
    2084:	3f c0       	rjmp	.+126    	; 0x2104 <Close_Door+0x228>
	else if (__tmp > 65535)
    2086:	6f 81       	ldd	r22, Y+7	; 0x07
    2088:	78 85       	ldd	r23, Y+8	; 0x08
    208a:	89 85       	ldd	r24, Y+9	; 0x09
    208c:	9a 85       	ldd	r25, Y+10	; 0x0a
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	3f ef       	ldi	r19, 0xFF	; 255
    2092:	4f e7       	ldi	r20, 0x7F	; 127
    2094:	57 e4       	ldi	r21, 0x47	; 71
    2096:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    209a:	18 16       	cp	r1, r24
    209c:	4c f5       	brge	.+82     	; 0x20f0 <Close_Door+0x214>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209e:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e2       	ldi	r20, 0x20	; 32
    20ac:	51 e4       	ldi	r21, 0x41	; 65
    20ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	bc 01       	movw	r22, r24
    20b8:	cd 01       	movw	r24, r26
    20ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	9e 83       	std	Y+6, r25	; 0x06
    20c4:	8d 83       	std	Y+5, r24	; 0x05
    20c6:	0f c0       	rjmp	.+30     	; 0x20e6 <Close_Door+0x20a>
    20c8:	88 ec       	ldi	r24, 0xC8	; 200
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	9c 83       	std	Y+4, r25	; 0x04
    20ce:	8b 83       	std	Y+3, r24	; 0x03
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	9c 81       	ldd	r25, Y+4	; 0x04
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <Close_Door+0x1f8>
    20d8:	9c 83       	std	Y+4, r25	; 0x04
    20da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20dc:	8d 81       	ldd	r24, Y+5	; 0x05
    20de:	9e 81       	ldd	r25, Y+6	; 0x06
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	9e 83       	std	Y+6, r25	; 0x06
    20e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e6:	8d 81       	ldd	r24, Y+5	; 0x05
    20e8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	69 f7       	brne	.-38     	; 0x20c8 <Close_Door+0x1ec>
    20ee:	14 c0       	rjmp	.+40     	; 0x2118 <Close_Door+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f0:	6f 81       	ldd	r22, Y+7	; 0x07
    20f2:	78 85       	ldd	r23, Y+8	; 0x08
    20f4:	89 85       	ldd	r24, Y+9	; 0x09
    20f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fc:	dc 01       	movw	r26, r24
    20fe:	cb 01       	movw	r24, r22
    2100:	9e 83       	std	Y+6, r25	; 0x06
    2102:	8d 83       	std	Y+5, r24	; 0x05
    2104:	8d 81       	ldd	r24, Y+5	; 0x05
    2106:	9e 81       	ldd	r25, Y+6	; 0x06
    2108:	9a 83       	std	Y+2, r25	; 0x02
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	9a 81       	ldd	r25, Y+2	; 0x02
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <Close_Door+0x234>
    2114:	9a 83       	std	Y+2, r25	; 0x02
    2116:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		/*flag =0 to indicate that number entered is wrong*/
		Close_door_flag=0;
    2118:	10 92 02 01 	sts	0x0102, r1
	}

}
    211c:	6d 96       	adiw	r28, 0x1d	; 29
    211e:	0f b6       	in	r0, 0x3f	; 63
    2120:	f8 94       	cli
    2122:	de bf       	out	0x3e, r29	; 62
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	cd bf       	out	0x3d, r28	; 61
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	08 95       	ret

0000212e <Display_Status>:

void Display_Status(void)
{
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	00 d0       	rcall	.+0      	; 0x2134 <Display_Status+0x6>
    2134:	0f 92       	push	r0
    2136:	cd b7       	in	r28, 0x3d	; 61
    2138:	de b7       	in	r29, 0x3e	; 62
	u8 Received_Data;
	Received_Data=USART_u8Receive();
    213a:	0e 94 0a 06 	call	0xc14	; 0xc14 <USART_u8Receive>
    213e:	89 83       	std	Y+1, r24	; 0x01
	switch(Received_Data)
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	3b 83       	std	Y+3, r19	; 0x03
    2148:	2a 83       	std	Y+2, r18	; 0x02
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	9b 81       	ldd	r25, Y+3	; 0x03
    214e:	82 30       	cpi	r24, 0x02	; 2
    2150:	91 05       	cpc	r25, r1
    2152:	71 f0       	breq	.+28     	; 0x2170 <Display_Status+0x42>
    2154:	2a 81       	ldd	r18, Y+2	; 0x02
    2156:	3b 81       	ldd	r19, Y+3	; 0x03
    2158:	23 30       	cpi	r18, 0x03	; 3
    215a:	31 05       	cpc	r19, r1
    215c:	69 f0       	breq	.+26     	; 0x2178 <Display_Status+0x4a>
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	9b 81       	ldd	r25, Y+3	; 0x03
    2162:	81 30       	cpi	r24, 0x01	; 1
    2164:	91 05       	cpc	r25, r1
    2166:	61 f4       	brne	.+24     	; 0x2180 <Display_Status+0x52>
	case 1:
		//CLCD_voidClearDisplay();
		//CLCD_voidSendString("Door is Open");
		//_delay_ms(500);
		/*flag =1 to indicate that door is opened*/
		Display_status_flag=1;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	80 93 03 01 	sts	0x0103, r24
    216e:	0b c0       	rjmp	.+22     	; 0x2186 <Display_Status+0x58>
	case 2:
		//CLCD_voidClearDisplay();
		//CLCD_voidSendString("Wrong Password!");
		//_delay_ms(500);
		/*flag =2 to indicate that password sent is wrong*/
		Display_status_flag=2;
    2170:	82 e0       	ldi	r24, 0x02	; 2
    2172:	80 93 03 01 	sts	0x0103, r24
    2176:	07 c0       	rjmp	.+14     	; 0x2186 <Display_Status+0x58>
	case 3:
		//CLCD_voidClearDisplay();
		//CLCD_voidSendString("Door is Close");
		//_delay_ms(500);
		/*flag =3 to indicate that door is closed after being opened*/
		Display_status_flag=3;
    2178:	83 e0       	ldi	r24, 0x03	; 3
    217a:	80 93 03 01 	sts	0x0103, r24
    217e:	03 c0       	rjmp	.+6      	; 0x2186 <Display_Status+0x58>
		break;
	default:
		//CLCD_voidClearDisplay();
		//CLCD_voidSendString("ERROR");
		/*flag =4 to indicate error*/
		Display_status_flag=4;
    2180:	84 e0       	ldi	r24, 0x04	; 4
    2182:	80 93 03 01 	sts	0x0103, r24
	}

}
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	08 95       	ret

00002192 <APP_Init>:

void APP_Init(void)
{
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
	MC1_Init();
    219a:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <MC1_Init>
}
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <APP_Start>:
/*Application implementation*/
void APP_Start(void)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
    21ac:	ac 97       	sbiw	r28, 0x2c	; 44
    21ae:	0f b6       	in	r0, 0x3f	; 63
    21b0:	f8 94       	cli
    21b2:	de bf       	out	0x3e, r29	; 62
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	cd bf       	out	0x3d, r28	; 61
	Take_Password();
    21b8:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <Take_Password>
	if(Password_flag==1)
    21bc:	80 91 00 01 	lds	r24, 0x0100
    21c0:	81 30       	cpi	r24, 0x01	; 1
    21c2:	09 f0       	breq	.+2      	; 0x21c6 <APP_Start+0x22>
    21c4:	9b c1       	rjmp	.+822    	; 0x24fc <APP_Start+0x358>
	{
		Send_Password();
    21c6:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <Send_Password>
		if(Send_Password_flag==1)
    21ca:	80 91 01 01 	lds	r24, 0x0101
    21ce:	81 30       	cpi	r24, 0x01	; 1
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <APP_Start+0x30>
    21d2:	94 c1       	rjmp	.+808    	; 0x24fc <APP_Start+0x358>
		{
			Display_Status();
    21d4:	0e 94 97 10 	call	0x212e	; 0x212e <Display_Status>
			switch(Display_status_flag)
    21d8:	80 91 03 01 	lds	r24, 0x0103
    21dc:	28 2f       	mov	r18, r24
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	3c a7       	std	Y+44, r19	; 0x2c
    21e2:	2b a7       	std	Y+43, r18	; 0x2b
    21e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    21e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    21e8:	81 30       	cpi	r24, 0x01	; 1
    21ea:	91 05       	cpc	r25, r1
    21ec:	39 f0       	breq	.+14     	; 0x21fc <APP_Start+0x58>
    21ee:	2b a5       	ldd	r18, Y+43	; 0x2b
    21f0:	3c a5       	ldd	r19, Y+44	; 0x2c
    21f2:	22 30       	cpi	r18, 0x02	; 2
    21f4:	31 05       	cpc	r19, r1
    21f6:	09 f4       	brne	.+2      	; 0x21fa <APP_Start+0x56>
    21f8:	02 c1       	rjmp	.+516    	; 0x23fe <APP_Start+0x25a>
    21fa:	7a c1       	rjmp	.+756    	; 0x24f0 <APP_Start+0x34c>
			{
			case 1:
				CLCD_voidClearDisplay();
    21fc:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <CLCD_voidClearDisplay>
				CLCD_voidSendString("Door is Open");
    2200:	8b ea       	ldi	r24, 0xAB	; 171
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	0e 94 8d 0b 	call	0x171a	; 0x171a <CLCD_voidSendString>
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	aa ef       	ldi	r26, 0xFA	; 250
    220e:	b3 e4       	ldi	r27, 0x43	; 67
    2210:	8f a3       	std	Y+39, r24	; 0x27
    2212:	98 a7       	std	Y+40, r25	; 0x28
    2214:	a9 a7       	std	Y+41, r26	; 0x29
    2216:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2218:	6f a1       	ldd	r22, Y+39	; 0x27
    221a:	78 a5       	ldd	r23, Y+40	; 0x28
    221c:	89 a5       	ldd	r24, Y+41	; 0x29
    221e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	4a ef       	ldi	r20, 0xFA	; 250
    2226:	54 e4       	ldi	r21, 0x44	; 68
    2228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	8b a3       	std	Y+35, r24	; 0x23
    2232:	9c a3       	std	Y+36, r25	; 0x24
    2234:	ad a3       	std	Y+37, r26	; 0x25
    2236:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2238:	6b a1       	ldd	r22, Y+35	; 0x23
    223a:	7c a1       	ldd	r23, Y+36	; 0x24
    223c:	8d a1       	ldd	r24, Y+37	; 0x25
    223e:	9e a1       	ldd	r25, Y+38	; 0x26
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e8       	ldi	r20, 0x80	; 128
    2246:	5f e3       	ldi	r21, 0x3F	; 63
    2248:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    224c:	88 23       	and	r24, r24
    224e:	2c f4       	brge	.+10     	; 0x225a <APP_Start+0xb6>
		__ticks = 1;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	9a a3       	std	Y+34, r25	; 0x22
    2256:	89 a3       	std	Y+33, r24	; 0x21
    2258:	3f c0       	rjmp	.+126    	; 0x22d8 <APP_Start+0x134>
	else if (__tmp > 65535)
    225a:	6b a1       	ldd	r22, Y+35	; 0x23
    225c:	7c a1       	ldd	r23, Y+36	; 0x24
    225e:	8d a1       	ldd	r24, Y+37	; 0x25
    2260:	9e a1       	ldd	r25, Y+38	; 0x26
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	3f ef       	ldi	r19, 0xFF	; 255
    2266:	4f e7       	ldi	r20, 0x7F	; 127
    2268:	57 e4       	ldi	r21, 0x47	; 71
    226a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    226e:	18 16       	cp	r1, r24
    2270:	4c f5       	brge	.+82     	; 0x22c4 <APP_Start+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2272:	6f a1       	ldd	r22, Y+39	; 0x27
    2274:	78 a5       	ldd	r23, Y+40	; 0x28
    2276:	89 a5       	ldd	r24, Y+41	; 0x29
    2278:	9a a5       	ldd	r25, Y+42	; 0x2a
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e2       	ldi	r20, 0x20	; 32
    2280:	51 e4       	ldi	r21, 0x41	; 65
    2282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	9a a3       	std	Y+34, r25	; 0x22
    2298:	89 a3       	std	Y+33, r24	; 0x21
    229a:	0f c0       	rjmp	.+30     	; 0x22ba <APP_Start+0x116>
    229c:	88 ec       	ldi	r24, 0xC8	; 200
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	98 a3       	std	Y+32, r25	; 0x20
    22a2:	8f 8f       	std	Y+31, r24	; 0x1f
    22a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22a6:	98 a1       	ldd	r25, Y+32	; 0x20
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <APP_Start+0x104>
    22ac:	98 a3       	std	Y+32, r25	; 0x20
    22ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b0:	89 a1       	ldd	r24, Y+33	; 0x21
    22b2:	9a a1       	ldd	r25, Y+34	; 0x22
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	9a a3       	std	Y+34, r25	; 0x22
    22b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ba:	89 a1       	ldd	r24, Y+33	; 0x21
    22bc:	9a a1       	ldd	r25, Y+34	; 0x22
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	69 f7       	brne	.-38     	; 0x229c <APP_Start+0xf8>
    22c2:	14 c0       	rjmp	.+40     	; 0x22ec <APP_Start+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c4:	6b a1       	ldd	r22, Y+35	; 0x23
    22c6:	7c a1       	ldd	r23, Y+36	; 0x24
    22c8:	8d a1       	ldd	r24, Y+37	; 0x25
    22ca:	9e a1       	ldd	r25, Y+38	; 0x26
    22cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	9a a3       	std	Y+34, r25	; 0x22
    22d6:	89 a3       	std	Y+33, r24	; 0x21
    22d8:	89 a1       	ldd	r24, Y+33	; 0x21
    22da:	9a a1       	ldd	r25, Y+34	; 0x22
    22dc:	9e 8f       	std	Y+30, r25	; 0x1e
    22de:	8d 8f       	std	Y+29, r24	; 0x1d
    22e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <APP_Start+0x140>
    22e8:	9e 8f       	std	Y+30, r25	; 0x1e
    22ea:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				Close_Door();
    22ec:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <Close_Door>
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <APP_Start+0x152>
				while(Close_door_flag==0)
				{
					Close_Door();
    22f2:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <Close_Door>
			case 1:
				CLCD_voidClearDisplay();
				CLCD_voidSendString("Door is Open");
				_delay_ms(500);
				Close_Door();
				while(Close_door_flag==0)
    22f6:	80 91 02 01 	lds	r24, 0x0102
    22fa:	88 23       	and	r24, r24
    22fc:	d1 f3       	breq	.-12     	; 0x22f2 <APP_Start+0x14e>
				{
					Close_Door();
				}
				Display_Status();
    22fe:	0e 94 97 10 	call	0x212e	; 0x212e <Display_Status>
				if(Display_status_flag==3)
    2302:	80 91 03 01 	lds	r24, 0x0103
    2306:	83 30       	cpi	r24, 0x03	; 3
    2308:	09 f0       	breq	.+2      	; 0x230c <APP_Start+0x168>
    230a:	f8 c0       	rjmp	.+496    	; 0x24fc <APP_Start+0x358>
				{
					CLCD_voidClearDisplay();
    230c:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <CLCD_voidClearDisplay>
					CLCD_voidSendString("Door is Close");
    2310:	88 eb       	ldi	r24, 0xB8	; 184
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	0e 94 8d 0b 	call	0x171a	; 0x171a <CLCD_voidSendString>
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	aa ef       	ldi	r26, 0xFA	; 250
    231e:	b3 e4       	ldi	r27, 0x43	; 67
    2320:	89 8f       	std	Y+25, r24	; 0x19
    2322:	9a 8f       	std	Y+26, r25	; 0x1a
    2324:	ab 8f       	std	Y+27, r26	; 0x1b
    2326:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2328:	69 8d       	ldd	r22, Y+25	; 0x19
    232a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    232c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    232e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	4a ef       	ldi	r20, 0xFA	; 250
    2336:	54 e4       	ldi	r21, 0x44	; 68
    2338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	8d 8b       	std	Y+21, r24	; 0x15
    2342:	9e 8b       	std	Y+22, r25	; 0x16
    2344:	af 8b       	std	Y+23, r26	; 0x17
    2346:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2348:	6d 89       	ldd	r22, Y+21	; 0x15
    234a:	7e 89       	ldd	r23, Y+22	; 0x16
    234c:	8f 89       	ldd	r24, Y+23	; 0x17
    234e:	98 8d       	ldd	r25, Y+24	; 0x18
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e8       	ldi	r20, 0x80	; 128
    2356:	5f e3       	ldi	r21, 0x3F	; 63
    2358:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    235c:	88 23       	and	r24, r24
    235e:	2c f4       	brge	.+10     	; 0x236a <APP_Start+0x1c6>
		__ticks = 1;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9c 8b       	std	Y+20, r25	; 0x14
    2366:	8b 8b       	std	Y+19, r24	; 0x13
    2368:	3f c0       	rjmp	.+126    	; 0x23e8 <APP_Start+0x244>
	else if (__tmp > 65535)
    236a:	6d 89       	ldd	r22, Y+21	; 0x15
    236c:	7e 89       	ldd	r23, Y+22	; 0x16
    236e:	8f 89       	ldd	r24, Y+23	; 0x17
    2370:	98 8d       	ldd	r25, Y+24	; 0x18
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	3f ef       	ldi	r19, 0xFF	; 255
    2376:	4f e7       	ldi	r20, 0x7F	; 127
    2378:	57 e4       	ldi	r21, 0x47	; 71
    237a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    237e:	18 16       	cp	r1, r24
    2380:	4c f5       	brge	.+82     	; 0x23d4 <APP_Start+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2382:	69 8d       	ldd	r22, Y+25	; 0x19
    2384:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2386:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2388:	9c 8d       	ldd	r25, Y+28	; 0x1c
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e2       	ldi	r20, 0x20	; 32
    2390:	51 e4       	ldi	r21, 0x41	; 65
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9c 8b       	std	Y+20, r25	; 0x14
    23a8:	8b 8b       	std	Y+19, r24	; 0x13
    23aa:	0f c0       	rjmp	.+30     	; 0x23ca <APP_Start+0x226>
    23ac:	88 ec       	ldi	r24, 0xC8	; 200
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	9a 8b       	std	Y+18, r25	; 0x12
    23b2:	89 8b       	std	Y+17, r24	; 0x11
    23b4:	89 89       	ldd	r24, Y+17	; 0x11
    23b6:	9a 89       	ldd	r25, Y+18	; 0x12
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <APP_Start+0x214>
    23bc:	9a 8b       	std	Y+18, r25	; 0x12
    23be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c0:	8b 89       	ldd	r24, Y+19	; 0x13
    23c2:	9c 89       	ldd	r25, Y+20	; 0x14
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	9c 8b       	std	Y+20, r25	; 0x14
    23c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ca:	8b 89       	ldd	r24, Y+19	; 0x13
    23cc:	9c 89       	ldd	r25, Y+20	; 0x14
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	69 f7       	brne	.-38     	; 0x23ac <APP_Start+0x208>
    23d2:	94 c0       	rjmp	.+296    	; 0x24fc <APP_Start+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d4:	6d 89       	ldd	r22, Y+21	; 0x15
    23d6:	7e 89       	ldd	r23, Y+22	; 0x16
    23d8:	8f 89       	ldd	r24, Y+23	; 0x17
    23da:	98 8d       	ldd	r25, Y+24	; 0x18
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9c 8b       	std	Y+20, r25	; 0x14
    23e6:	8b 8b       	std	Y+19, r24	; 0x13
    23e8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ea:	9c 89       	ldd	r25, Y+20	; 0x14
    23ec:	98 8b       	std	Y+16, r25	; 0x10
    23ee:	8f 87       	std	Y+15, r24	; 0x0f
    23f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f2:	98 89       	ldd	r25, Y+16	; 0x10
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <APP_Start+0x250>
    23f8:	98 8b       	std	Y+16, r25	; 0x10
    23fa:	8f 87       	std	Y+15, r24	; 0x0f
    23fc:	7f c0       	rjmp	.+254    	; 0x24fc <APP_Start+0x358>
					_delay_ms(500);
				}
				break;
			case 2:
				CLCD_voidClearDisplay();
    23fe:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <CLCD_voidClearDisplay>
				CLCD_voidSendString("Wrong Password!");
    2402:	86 ec       	ldi	r24, 0xC6	; 198
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	0e 94 8d 0b 	call	0x171a	; 0x171a <CLCD_voidSendString>
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	aa ef       	ldi	r26, 0xFA	; 250
    2410:	b3 e4       	ldi	r27, 0x43	; 67
    2412:	8b 87       	std	Y+11, r24	; 0x0b
    2414:	9c 87       	std	Y+12, r25	; 0x0c
    2416:	ad 87       	std	Y+13, r26	; 0x0d
    2418:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    241a:	6b 85       	ldd	r22, Y+11	; 0x0b
    241c:	7c 85       	ldd	r23, Y+12	; 0x0c
    241e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2420:	9e 85       	ldd	r25, Y+14	; 0x0e
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	4a ef       	ldi	r20, 0xFA	; 250
    2428:	54 e4       	ldi	r21, 0x44	; 68
    242a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	8f 83       	std	Y+7, r24	; 0x07
    2434:	98 87       	std	Y+8, r25	; 0x08
    2436:	a9 87       	std	Y+9, r26	; 0x09
    2438:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    243a:	6f 81       	ldd	r22, Y+7	; 0x07
    243c:	78 85       	ldd	r23, Y+8	; 0x08
    243e:	89 85       	ldd	r24, Y+9	; 0x09
    2440:	9a 85       	ldd	r25, Y+10	; 0x0a
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e8       	ldi	r20, 0x80	; 128
    2448:	5f e3       	ldi	r21, 0x3F	; 63
    244a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    244e:	88 23       	and	r24, r24
    2450:	2c f4       	brge	.+10     	; 0x245c <APP_Start+0x2b8>
		__ticks = 1;
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	9e 83       	std	Y+6, r25	; 0x06
    2458:	8d 83       	std	Y+5, r24	; 0x05
    245a:	3f c0       	rjmp	.+126    	; 0x24da <APP_Start+0x336>
	else if (__tmp > 65535)
    245c:	6f 81       	ldd	r22, Y+7	; 0x07
    245e:	78 85       	ldd	r23, Y+8	; 0x08
    2460:	89 85       	ldd	r24, Y+9	; 0x09
    2462:	9a 85       	ldd	r25, Y+10	; 0x0a
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	3f ef       	ldi	r19, 0xFF	; 255
    2468:	4f e7       	ldi	r20, 0x7F	; 127
    246a:	57 e4       	ldi	r21, 0x47	; 71
    246c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2470:	18 16       	cp	r1, r24
    2472:	4c f5       	brge	.+82     	; 0x24c6 <APP_Start+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2474:	6b 85       	ldd	r22, Y+11	; 0x0b
    2476:	7c 85       	ldd	r23, Y+12	; 0x0c
    2478:	8d 85       	ldd	r24, Y+13	; 0x0d
    247a:	9e 85       	ldd	r25, Y+14	; 0x0e
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	40 e2       	ldi	r20, 0x20	; 32
    2482:	51 e4       	ldi	r21, 0x41	; 65
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	bc 01       	movw	r22, r24
    248e:	cd 01       	movw	r24, r26
    2490:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	9e 83       	std	Y+6, r25	; 0x06
    249a:	8d 83       	std	Y+5, r24	; 0x05
    249c:	0f c0       	rjmp	.+30     	; 0x24bc <APP_Start+0x318>
    249e:	88 ec       	ldi	r24, 0xC8	; 200
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	9c 83       	std	Y+4, r25	; 0x04
    24a4:	8b 83       	std	Y+3, r24	; 0x03
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	9c 81       	ldd	r25, Y+4	; 0x04
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <APP_Start+0x306>
    24ae:	9c 83       	std	Y+4, r25	; 0x04
    24b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24b2:	8d 81       	ldd	r24, Y+5	; 0x05
    24b4:	9e 81       	ldd	r25, Y+6	; 0x06
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	9e 83       	std	Y+6, r25	; 0x06
    24ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24bc:	8d 81       	ldd	r24, Y+5	; 0x05
    24be:	9e 81       	ldd	r25, Y+6	; 0x06
    24c0:	00 97       	sbiw	r24, 0x00	; 0
    24c2:	69 f7       	brne	.-38     	; 0x249e <APP_Start+0x2fa>
    24c4:	1b c0       	rjmp	.+54     	; 0x24fc <APP_Start+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c6:	6f 81       	ldd	r22, Y+7	; 0x07
    24c8:	78 85       	ldd	r23, Y+8	; 0x08
    24ca:	89 85       	ldd	r24, Y+9	; 0x09
    24cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	9e 83       	std	Y+6, r25	; 0x06
    24d8:	8d 83       	std	Y+5, r24	; 0x05
    24da:	8d 81       	ldd	r24, Y+5	; 0x05
    24dc:	9e 81       	ldd	r25, Y+6	; 0x06
    24de:	9a 83       	std	Y+2, r25	; 0x02
    24e0:	89 83       	std	Y+1, r24	; 0x01
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	9a 81       	ldd	r25, Y+2	; 0x02
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	f1 f7       	brne	.-4      	; 0x24e6 <APP_Start+0x342>
    24ea:	9a 83       	std	Y+2, r25	; 0x02
    24ec:	89 83       	std	Y+1, r24	; 0x01
    24ee:	06 c0       	rjmp	.+12     	; 0x24fc <APP_Start+0x358>
				_delay_ms(500);
				break;
			default:
				CLCD_voidClearDisplay();
    24f0:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <CLCD_voidClearDisplay>
				CLCD_voidSendString("ERROR");
    24f4:	86 ed       	ldi	r24, 0xD6	; 214
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	0e 94 8d 0b 	call	0x171a	; 0x171a <CLCD_voidSendString>
			}
		}
	}
}
    24fc:	ac 96       	adiw	r28, 0x2c	; 44
    24fe:	0f b6       	in	r0, 0x3f	; 63
    2500:	f8 94       	cli
    2502:	de bf       	out	0x3e, r29	; 62
    2504:	0f be       	out	0x3f, r0	; 63
    2506:	cd bf       	out	0x3d, r28	; 61
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	08 95       	ret

0000250e <main>:




int main(void)
{
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
    2516:	2e 97       	sbiw	r28, 0x0e	; 14
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
	MC1_Init();
    2522:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <MC1_Init>
	while(1)
	{
		APP_Start();
    2526:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <APP_Start>
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	aa e7       	ldi	r26, 0x7A	; 122
    2530:	b4 e4       	ldi	r27, 0x44	; 68
    2532:	8b 87       	std	Y+11, r24	; 0x0b
    2534:	9c 87       	std	Y+12, r25	; 0x0c
    2536:	ad 87       	std	Y+13, r26	; 0x0d
    2538:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    253a:	6b 85       	ldd	r22, Y+11	; 0x0b
    253c:	7c 85       	ldd	r23, Y+12	; 0x0c
    253e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2540:	9e 85       	ldd	r25, Y+14	; 0x0e
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	4a ef       	ldi	r20, 0xFA	; 250
    2548:	54 e4       	ldi	r21, 0x44	; 68
    254a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	8f 83       	std	Y+7, r24	; 0x07
    2554:	98 87       	std	Y+8, r25	; 0x08
    2556:	a9 87       	std	Y+9, r26	; 0x09
    2558:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    255a:	6f 81       	ldd	r22, Y+7	; 0x07
    255c:	78 85       	ldd	r23, Y+8	; 0x08
    255e:	89 85       	ldd	r24, Y+9	; 0x09
    2560:	9a 85       	ldd	r25, Y+10	; 0x0a
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e8       	ldi	r20, 0x80	; 128
    2568:	5f e3       	ldi	r21, 0x3F	; 63
    256a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    256e:	88 23       	and	r24, r24
    2570:	2c f4       	brge	.+10     	; 0x257c <main+0x6e>
		__ticks = 1;
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	9e 83       	std	Y+6, r25	; 0x06
    2578:	8d 83       	std	Y+5, r24	; 0x05
    257a:	3f c0       	rjmp	.+126    	; 0x25fa <main+0xec>
	else if (__tmp > 65535)
    257c:	6f 81       	ldd	r22, Y+7	; 0x07
    257e:	78 85       	ldd	r23, Y+8	; 0x08
    2580:	89 85       	ldd	r24, Y+9	; 0x09
    2582:	9a 85       	ldd	r25, Y+10	; 0x0a
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	3f ef       	ldi	r19, 0xFF	; 255
    2588:	4f e7       	ldi	r20, 0x7F	; 127
    258a:	57 e4       	ldi	r21, 0x47	; 71
    258c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2590:	18 16       	cp	r1, r24
    2592:	4c f5       	brge	.+82     	; 0x25e6 <main+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2594:	6b 85       	ldd	r22, Y+11	; 0x0b
    2596:	7c 85       	ldd	r23, Y+12	; 0x0c
    2598:	8d 85       	ldd	r24, Y+13	; 0x0d
    259a:	9e 85       	ldd	r25, Y+14	; 0x0e
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e2       	ldi	r20, 0x20	; 32
    25a2:	51 e4       	ldi	r21, 0x41	; 65
    25a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	bc 01       	movw	r22, r24
    25ae:	cd 01       	movw	r24, r26
    25b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	9e 83       	std	Y+6, r25	; 0x06
    25ba:	8d 83       	std	Y+5, r24	; 0x05
    25bc:	0f c0       	rjmp	.+30     	; 0x25dc <main+0xce>
    25be:	88 ec       	ldi	r24, 0xC8	; 200
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	9c 83       	std	Y+4, r25	; 0x04
    25c4:	8b 83       	std	Y+3, r24	; 0x03
    25c6:	8b 81       	ldd	r24, Y+3	; 0x03
    25c8:	9c 81       	ldd	r25, Y+4	; 0x04
    25ca:	01 97       	sbiw	r24, 0x01	; 1
    25cc:	f1 f7       	brne	.-4      	; 0x25ca <main+0xbc>
    25ce:	9c 83       	std	Y+4, r25	; 0x04
    25d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d2:	8d 81       	ldd	r24, Y+5	; 0x05
    25d4:	9e 81       	ldd	r25, Y+6	; 0x06
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	9e 83       	std	Y+6, r25	; 0x06
    25da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25dc:	8d 81       	ldd	r24, Y+5	; 0x05
    25de:	9e 81       	ldd	r25, Y+6	; 0x06
    25e0:	00 97       	sbiw	r24, 0x00	; 0
    25e2:	69 f7       	brne	.-38     	; 0x25be <main+0xb0>
    25e4:	a0 cf       	rjmp	.-192    	; 0x2526 <main+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e6:	6f 81       	ldd	r22, Y+7	; 0x07
    25e8:	78 85       	ldd	r23, Y+8	; 0x08
    25ea:	89 85       	ldd	r24, Y+9	; 0x09
    25ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	9e 83       	std	Y+6, r25	; 0x06
    25f8:	8d 83       	std	Y+5, r24	; 0x05
    25fa:	8d 81       	ldd	r24, Y+5	; 0x05
    25fc:	9e 81       	ldd	r25, Y+6	; 0x06
    25fe:	9a 83       	std	Y+2, r25	; 0x02
    2600:	89 83       	std	Y+1, r24	; 0x01
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	9a 81       	ldd	r25, Y+2	; 0x02
    2606:	01 97       	sbiw	r24, 0x01	; 1
    2608:	f1 f7       	brne	.-4      	; 0x2606 <main+0xf8>
    260a:	9a 83       	std	Y+2, r25	; 0x02
    260c:	89 83       	std	Y+1, r24	; 0x01
    260e:	8b cf       	rjmp	.-234    	; 0x2526 <main+0x18>

00002610 <__prologue_saves__>:
    2610:	2f 92       	push	r2
    2612:	3f 92       	push	r3
    2614:	4f 92       	push	r4
    2616:	5f 92       	push	r5
    2618:	6f 92       	push	r6
    261a:	7f 92       	push	r7
    261c:	8f 92       	push	r8
    261e:	9f 92       	push	r9
    2620:	af 92       	push	r10
    2622:	bf 92       	push	r11
    2624:	cf 92       	push	r12
    2626:	df 92       	push	r13
    2628:	ef 92       	push	r14
    262a:	ff 92       	push	r15
    262c:	0f 93       	push	r16
    262e:	1f 93       	push	r17
    2630:	cf 93       	push	r28
    2632:	df 93       	push	r29
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	ca 1b       	sub	r28, r26
    263a:	db 0b       	sbc	r29, r27
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	f8 94       	cli
    2640:	de bf       	out	0x3e, r29	; 62
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	cd bf       	out	0x3d, r28	; 61
    2646:	09 94       	ijmp

00002648 <__epilogue_restores__>:
    2648:	2a 88       	ldd	r2, Y+18	; 0x12
    264a:	39 88       	ldd	r3, Y+17	; 0x11
    264c:	48 88       	ldd	r4, Y+16	; 0x10
    264e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2650:	6e 84       	ldd	r6, Y+14	; 0x0e
    2652:	7d 84       	ldd	r7, Y+13	; 0x0d
    2654:	8c 84       	ldd	r8, Y+12	; 0x0c
    2656:	9b 84       	ldd	r9, Y+11	; 0x0b
    2658:	aa 84       	ldd	r10, Y+10	; 0x0a
    265a:	b9 84       	ldd	r11, Y+9	; 0x09
    265c:	c8 84       	ldd	r12, Y+8	; 0x08
    265e:	df 80       	ldd	r13, Y+7	; 0x07
    2660:	ee 80       	ldd	r14, Y+6	; 0x06
    2662:	fd 80       	ldd	r15, Y+5	; 0x05
    2664:	0c 81       	ldd	r16, Y+4	; 0x04
    2666:	1b 81       	ldd	r17, Y+3	; 0x03
    2668:	aa 81       	ldd	r26, Y+2	; 0x02
    266a:	b9 81       	ldd	r27, Y+1	; 0x01
    266c:	ce 0f       	add	r28, r30
    266e:	d1 1d       	adc	r29, r1
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	ed 01       	movw	r28, r26
    267c:	08 95       	ret

0000267e <_exit>:
    267e:	f8 94       	cli

00002680 <__stop_program>:
    2680:	ff cf       	rjmp	.-2      	; 0x2680 <__stop_program>
